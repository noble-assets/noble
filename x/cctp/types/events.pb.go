// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cctp/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Event signatures in the CCTP module
type AttesterEnabled struct {
	Attester string `protobuf:"bytes,1,opt,name=attester,proto3" json:"attester,omitempty"`
}

func (m *AttesterEnabled) Reset()         { *m = AttesterEnabled{} }
func (m *AttesterEnabled) String() string { return proto.CompactTextString(m) }
func (*AttesterEnabled) ProtoMessage()    {}
func (*AttesterEnabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{0}
}
func (m *AttesterEnabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterEnabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterEnabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterEnabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterEnabled.Merge(m, src)
}
func (m *AttesterEnabled) XXX_Size() int {
	return m.Size()
}
func (m *AttesterEnabled) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterEnabled.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterEnabled proto.InternalMessageInfo

func (m *AttesterEnabled) GetAttester() string {
	if m != nil {
		return m.Attester
	}
	return ""
}

type AttesterDisabled struct {
	Attester string `protobuf:"bytes,1,opt,name=attester,proto3" json:"attester,omitempty"`
}

func (m *AttesterDisabled) Reset()         { *m = AttesterDisabled{} }
func (m *AttesterDisabled) String() string { return proto.CompactTextString(m) }
func (*AttesterDisabled) ProtoMessage()    {}
func (*AttesterDisabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{1}
}
func (m *AttesterDisabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterDisabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterDisabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterDisabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterDisabled.Merge(m, src)
}
func (m *AttesterDisabled) XXX_Size() int {
	return m.Size()
}
func (m *AttesterDisabled) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterDisabled.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterDisabled proto.InternalMessageInfo

func (m *AttesterDisabled) GetAttester() string {
	if m != nil {
		return m.Attester
	}
	return ""
}

type SignatureThresholdUpdated struct {
	OldSignatureThreshold uint64 `protobuf:"varint,1,opt,name=oldSignatureThreshold,proto3" json:"oldSignatureThreshold,omitempty"`
	NewSignatureThreshold uint64 `protobuf:"varint,2,opt,name=newSignatureThreshold,proto3" json:"newSignatureThreshold,omitempty"`
}

func (m *SignatureThresholdUpdated) Reset()         { *m = SignatureThresholdUpdated{} }
func (m *SignatureThresholdUpdated) String() string { return proto.CompactTextString(m) }
func (*SignatureThresholdUpdated) ProtoMessage()    {}
func (*SignatureThresholdUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{2}
}
func (m *SignatureThresholdUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureThresholdUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureThresholdUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureThresholdUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureThresholdUpdated.Merge(m, src)
}
func (m *SignatureThresholdUpdated) XXX_Size() int {
	return m.Size()
}
func (m *SignatureThresholdUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureThresholdUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureThresholdUpdated proto.InternalMessageInfo

func (m *SignatureThresholdUpdated) GetOldSignatureThreshold() uint64 {
	if m != nil {
		return m.OldSignatureThreshold
	}
	return 0
}

func (m *SignatureThresholdUpdated) GetNewSignatureThreshold() uint64 {
	if m != nil {
		return m.NewSignatureThreshold
	}
	return 0
}

type AuthorityUpdated struct {
	PreviousAuthority string `protobuf:"bytes,1,opt,name=previousAuthority,proto3" json:"previousAuthority,omitempty"`
	NewAuthority      string `protobuf:"bytes,2,opt,name=newAuthority,proto3" json:"newAuthority,omitempty"`
}

func (m *AuthorityUpdated) Reset()         { *m = AuthorityUpdated{} }
func (m *AuthorityUpdated) String() string { return proto.CompactTextString(m) }
func (*AuthorityUpdated) ProtoMessage()    {}
func (*AuthorityUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{3}
}
func (m *AuthorityUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorityUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorityUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorityUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorityUpdated.Merge(m, src)
}
func (m *AuthorityUpdated) XXX_Size() int {
	return m.Size()
}
func (m *AuthorityUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorityUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorityUpdated proto.InternalMessageInfo

func (m *AuthorityUpdated) GetPreviousAuthority() string {
	if m != nil {
		return m.PreviousAuthority
	}
	return ""
}

func (m *AuthorityUpdated) GetNewAuthority() string {
	if m != nil {
		return m.NewAuthority
	}
	return ""
}

type PauseBurningAndMinting struct {
}

func (m *PauseBurningAndMinting) Reset()         { *m = PauseBurningAndMinting{} }
func (m *PauseBurningAndMinting) String() string { return proto.CompactTextString(m) }
func (*PauseBurningAndMinting) ProtoMessage()    {}
func (*PauseBurningAndMinting) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{4}
}
func (m *PauseBurningAndMinting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseBurningAndMinting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseBurningAndMinting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseBurningAndMinting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseBurningAndMinting.Merge(m, src)
}
func (m *PauseBurningAndMinting) XXX_Size() int {
	return m.Size()
}
func (m *PauseBurningAndMinting) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseBurningAndMinting.DiscardUnknown(m)
}

var xxx_messageInfo_PauseBurningAndMinting proto.InternalMessageInfo

type UnpauseBurningAndMinting struct {
}

func (m *UnpauseBurningAndMinting) Reset()         { *m = UnpauseBurningAndMinting{} }
func (m *UnpauseBurningAndMinting) String() string { return proto.CompactTextString(m) }
func (*UnpauseBurningAndMinting) ProtoMessage()    {}
func (*UnpauseBurningAndMinting) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{5}
}
func (m *UnpauseBurningAndMinting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnpauseBurningAndMinting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnpauseBurningAndMinting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnpauseBurningAndMinting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnpauseBurningAndMinting.Merge(m, src)
}
func (m *UnpauseBurningAndMinting) XXX_Size() int {
	return m.Size()
}
func (m *UnpauseBurningAndMinting) XXX_DiscardUnknown() {
	xxx_messageInfo_UnpauseBurningAndMinting.DiscardUnknown(m)
}

var xxx_messageInfo_UnpauseBurningAndMinting proto.InternalMessageInfo

type PauseSendingAndReceiving struct {
}

func (m *PauseSendingAndReceiving) Reset()         { *m = PauseSendingAndReceiving{} }
func (m *PauseSendingAndReceiving) String() string { return proto.CompactTextString(m) }
func (*PauseSendingAndReceiving) ProtoMessage()    {}
func (*PauseSendingAndReceiving) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{6}
}
func (m *PauseSendingAndReceiving) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseSendingAndReceiving) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseSendingAndReceiving.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseSendingAndReceiving) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseSendingAndReceiving.Merge(m, src)
}
func (m *PauseSendingAndReceiving) XXX_Size() int {
	return m.Size()
}
func (m *PauseSendingAndReceiving) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseSendingAndReceiving.DiscardUnknown(m)
}

var xxx_messageInfo_PauseSendingAndReceiving proto.InternalMessageInfo

type UnpauseSendingAndReceiving struct {
}

func (m *UnpauseSendingAndReceiving) Reset()         { *m = UnpauseSendingAndReceiving{} }
func (m *UnpauseSendingAndReceiving) String() string { return proto.CompactTextString(m) }
func (*UnpauseSendingAndReceiving) ProtoMessage()    {}
func (*UnpauseSendingAndReceiving) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{7}
}
func (m *UnpauseSendingAndReceiving) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnpauseSendingAndReceiving) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnpauseSendingAndReceiving.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnpauseSendingAndReceiving) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnpauseSendingAndReceiving.Merge(m, src)
}
func (m *UnpauseSendingAndReceiving) XXX_Size() int {
	return m.Size()
}
func (m *UnpauseSendingAndReceiving) XXX_DiscardUnknown() {
	xxx_messageInfo_UnpauseSendingAndReceiving.DiscardUnknown(m)
}

var xxx_messageInfo_UnpauseSendingAndReceiving proto.InternalMessageInfo

type DepositForBurn struct {
	Nonce                     uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BurnToken                 string `protobuf:"bytes,2,opt,name=burnToken,proto3" json:"burnToken,omitempty"`
	Amount                    uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Depositor                 string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	MintRecipient             []byte `protobuf:"bytes,5,opt,name=mintRecipient,proto3" json:"mintRecipient,omitempty"`
	DestinationDomain         uint32 `protobuf:"varint,6,opt,name=destinationDomain,proto3" json:"destinationDomain,omitempty"`
	DestinationTokenMessenger []byte `protobuf:"bytes,7,opt,name=destinationTokenMessenger,proto3" json:"destinationTokenMessenger,omitempty"`
	DestinationCaller         []byte `protobuf:"bytes,8,opt,name=destinationCaller,proto3" json:"destinationCaller,omitempty"`
}

func (m *DepositForBurn) Reset()         { *m = DepositForBurn{} }
func (m *DepositForBurn) String() string { return proto.CompactTextString(m) }
func (*DepositForBurn) ProtoMessage()    {}
func (*DepositForBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{8}
}
func (m *DepositForBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositForBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositForBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositForBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositForBurn.Merge(m, src)
}
func (m *DepositForBurn) XXX_Size() int {
	return m.Size()
}
func (m *DepositForBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositForBurn.DiscardUnknown(m)
}

var xxx_messageInfo_DepositForBurn proto.InternalMessageInfo

func (m *DepositForBurn) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *DepositForBurn) GetBurnToken() string {
	if m != nil {
		return m.BurnToken
	}
	return ""
}

func (m *DepositForBurn) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DepositForBurn) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *DepositForBurn) GetMintRecipient() []byte {
	if m != nil {
		return m.MintRecipient
	}
	return nil
}

func (m *DepositForBurn) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *DepositForBurn) GetDestinationTokenMessenger() []byte {
	if m != nil {
		return m.DestinationTokenMessenger
	}
	return nil
}

func (m *DepositForBurn) GetDestinationCaller() []byte {
	if m != nil {
		return m.DestinationCaller
	}
	return nil
}

type MintAndWithdraw struct {
	MintRecipient string `protobuf:"bytes,1,opt,name=mintRecipient,proto3" json:"mintRecipient,omitempty"`
	Amount        uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	MintToken     string `protobuf:"bytes,3,opt,name=mintToken,proto3" json:"mintToken,omitempty"`
}

func (m *MintAndWithdraw) Reset()         { *m = MintAndWithdraw{} }
func (m *MintAndWithdraw) String() string { return proto.CompactTextString(m) }
func (*MintAndWithdraw) ProtoMessage()    {}
func (*MintAndWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{9}
}
func (m *MintAndWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintAndWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintAndWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintAndWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintAndWithdraw.Merge(m, src)
}
func (m *MintAndWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MintAndWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MintAndWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MintAndWithdraw proto.InternalMessageInfo

func (m *MintAndWithdraw) GetMintRecipient() string {
	if m != nil {
		return m.MintRecipient
	}
	return ""
}

func (m *MintAndWithdraw) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MintAndWithdraw) GetMintToken() string {
	if m != nil {
		return m.MintToken
	}
	return ""
}

type TokenPairLinked struct {
	LocalToken   string `protobuf:"bytes,1,opt,name=localToken,proto3" json:"localToken,omitempty"`
	RemoteDomain uint32 `protobuf:"varint,2,opt,name=remoteDomain,proto3" json:"remoteDomain,omitempty"`
	RemoteToken  string `protobuf:"bytes,3,opt,name=remoteToken,proto3" json:"remoteToken,omitempty"`
}

func (m *TokenPairLinked) Reset()         { *m = TokenPairLinked{} }
func (m *TokenPairLinked) String() string { return proto.CompactTextString(m) }
func (*TokenPairLinked) ProtoMessage()    {}
func (*TokenPairLinked) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{10}
}
func (m *TokenPairLinked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPairLinked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPairLinked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPairLinked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPairLinked.Merge(m, src)
}
func (m *TokenPairLinked) XXX_Size() int {
	return m.Size()
}
func (m *TokenPairLinked) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPairLinked.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPairLinked proto.InternalMessageInfo

func (m *TokenPairLinked) GetLocalToken() string {
	if m != nil {
		return m.LocalToken
	}
	return ""
}

func (m *TokenPairLinked) GetRemoteDomain() uint32 {
	if m != nil {
		return m.RemoteDomain
	}
	return 0
}

func (m *TokenPairLinked) GetRemoteToken() string {
	if m != nil {
		return m.RemoteToken
	}
	return ""
}

type TokenPairUnlinked struct {
	LocalToken   string `protobuf:"bytes,1,opt,name=localToken,proto3" json:"localToken,omitempty"`
	RemoteDomain uint32 `protobuf:"varint,2,opt,name=remoteDomain,proto3" json:"remoteDomain,omitempty"`
	RemoteToken  string `protobuf:"bytes,3,opt,name=remoteToken,proto3" json:"remoteToken,omitempty"`
}

func (m *TokenPairUnlinked) Reset()         { *m = TokenPairUnlinked{} }
func (m *TokenPairUnlinked) String() string { return proto.CompactTextString(m) }
func (*TokenPairUnlinked) ProtoMessage()    {}
func (*TokenPairUnlinked) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{11}
}
func (m *TokenPairUnlinked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPairUnlinked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPairUnlinked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPairUnlinked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPairUnlinked.Merge(m, src)
}
func (m *TokenPairUnlinked) XXX_Size() int {
	return m.Size()
}
func (m *TokenPairUnlinked) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPairUnlinked.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPairUnlinked proto.InternalMessageInfo

func (m *TokenPairUnlinked) GetLocalToken() string {
	if m != nil {
		return m.LocalToken
	}
	return ""
}

func (m *TokenPairUnlinked) GetRemoteDomain() uint32 {
	if m != nil {
		return m.RemoteDomain
	}
	return 0
}

func (m *TokenPairUnlinked) GetRemoteToken() string {
	if m != nil {
		return m.RemoteToken
	}
	return ""
}

type MessageSent struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *MessageSent) Reset()         { *m = MessageSent{} }
func (m *MessageSent) String() string { return proto.CompactTextString(m) }
func (*MessageSent) ProtoMessage()    {}
func (*MessageSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{12}
}
func (m *MessageSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSent.Merge(m, src)
}
func (m *MessageSent) XXX_Size() int {
	return m.Size()
}
func (m *MessageSent) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSent.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSent proto.InternalMessageInfo

func (m *MessageSent) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type MessageReceived struct {
	Caller       string `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
	SourceDomain uint32 `protobuf:"varint,2,opt,name=sourceDomain,proto3" json:"sourceDomain,omitempty"`
	Nonce        uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Sender       []byte `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	MessageBody  []byte `protobuf:"bytes,5,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
}

func (m *MessageReceived) Reset()         { *m = MessageReceived{} }
func (m *MessageReceived) String() string { return proto.CompactTextString(m) }
func (*MessageReceived) ProtoMessage()    {}
func (*MessageReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{13}
}
func (m *MessageReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageReceived.Merge(m, src)
}
func (m *MessageReceived) XXX_Size() int {
	return m.Size()
}
func (m *MessageReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageReceived.DiscardUnknown(m)
}

var xxx_messageInfo_MessageReceived proto.InternalMessageInfo

func (m *MessageReceived) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *MessageReceived) GetSourceDomain() uint32 {
	if m != nil {
		return m.SourceDomain
	}
	return 0
}

func (m *MessageReceived) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MessageReceived) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MessageReceived) GetMessageBody() []byte {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

type MaxMessageBodySizeUpdated struct {
	NewMaxMessageBodySize uint64 `protobuf:"varint,1,opt,name=newMaxMessageBodySize,proto3" json:"newMaxMessageBodySize,omitempty"`
}

func (m *MaxMessageBodySizeUpdated) Reset()         { *m = MaxMessageBodySizeUpdated{} }
func (m *MaxMessageBodySizeUpdated) String() string { return proto.CompactTextString(m) }
func (*MaxMessageBodySizeUpdated) ProtoMessage()    {}
func (*MaxMessageBodySizeUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef53833651fbc91, []int{14}
}
func (m *MaxMessageBodySizeUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxMessageBodySizeUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxMessageBodySizeUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxMessageBodySizeUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxMessageBodySizeUpdated.Merge(m, src)
}
func (m *MaxMessageBodySizeUpdated) XXX_Size() int {
	return m.Size()
}
func (m *MaxMessageBodySizeUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxMessageBodySizeUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_MaxMessageBodySizeUpdated proto.InternalMessageInfo

func (m *MaxMessageBodySizeUpdated) GetNewMaxMessageBodySize() uint64 {
	if m != nil {
		return m.NewMaxMessageBodySize
	}
	return 0
}

func init() {
	proto.RegisterType((*AttesterEnabled)(nil), "noble.cctp.AttesterEnabled")
	proto.RegisterType((*AttesterDisabled)(nil), "noble.cctp.AttesterDisabled")
	proto.RegisterType((*SignatureThresholdUpdated)(nil), "noble.cctp.SignatureThresholdUpdated")
	proto.RegisterType((*AuthorityUpdated)(nil), "noble.cctp.AuthorityUpdated")
	proto.RegisterType((*PauseBurningAndMinting)(nil), "noble.cctp.PauseBurningAndMinting")
	proto.RegisterType((*UnpauseBurningAndMinting)(nil), "noble.cctp.UnpauseBurningAndMinting")
	proto.RegisterType((*PauseSendingAndReceiving)(nil), "noble.cctp.PauseSendingAndReceiving")
	proto.RegisterType((*UnpauseSendingAndReceiving)(nil), "noble.cctp.UnpauseSendingAndReceiving")
	proto.RegisterType((*DepositForBurn)(nil), "noble.cctp.DepositForBurn")
	proto.RegisterType((*MintAndWithdraw)(nil), "noble.cctp.MintAndWithdraw")
	proto.RegisterType((*TokenPairLinked)(nil), "noble.cctp.TokenPairLinked")
	proto.RegisterType((*TokenPairUnlinked)(nil), "noble.cctp.TokenPairUnlinked")
	proto.RegisterType((*MessageSent)(nil), "noble.cctp.MessageSent")
	proto.RegisterType((*MessageReceived)(nil), "noble.cctp.MessageReceived")
	proto.RegisterType((*MaxMessageBodySizeUpdated)(nil), "noble.cctp.MaxMessageBodySizeUpdated")
}

func init() { proto.RegisterFile("cctp/events.proto", fileDescriptor_5ef53833651fbc91) }

var fileDescriptor_5ef53833651fbc91 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x4e, 0x1b, 0x49,
	0x10, 0x65, 0x0c, 0x18, 0x28, 0xcc, 0x1a, 0x46, 0xbb, 0x68, 0x40, 0xc8, 0xb2, 0x46, 0x2b, 0x2d,
	0x87, 0xc5, 0x96, 0x76, 0xf7, 0xb8, 0x17, 0x13, 0x92, 0x13, 0x96, 0xc8, 0x00, 0x8a, 0x94, 0x5b,
	0x7b, 0xba, 0x64, 0xb7, 0x18, 0x57, 0x8f, 0xba, 0x7b, 0x6c, 0x9c, 0x1f, 0xc8, 0x35, 0x3f, 0x90,
	0x1f, 0xc9, 0x17, 0xe4, 0xc8, 0x31, 0xc7, 0x08, 0x7e, 0x24, 0xea, 0xe9, 0xb1, 0x3d, 0xd8, 0x46,
	0xb9, 0xe5, 0x36, 0xf5, 0x5e, 0xbd, 0xae, 0xea, 0xd7, 0x35, 0x05, 0x07, 0x71, 0x6c, 0xd2, 0x36,
	0x8e, 0x90, 0x8c, 0x6e, 0xa5, 0x4a, 0x1a, 0xe9, 0x03, 0xc9, 0x5e, 0x82, 0x2d, 0x4b, 0x84, 0x67,
	0x50, 0xef, 0x18, 0x83, 0xda, 0xa0, 0x7a, 0x4d, 0xac, 0x97, 0x20, 0xf7, 0x8f, 0x61, 0x9b, 0x15,
	0x50, 0xe0, 0x35, 0xbd, 0xd3, 0x9d, 0x68, 0x16, 0x87, 0x2d, 0xd8, 0x9f, 0xa6, 0x5f, 0x08, 0xfd,
	0xf3, 0xfc, 0x8f, 0x1e, 0x1c, 0x5d, 0x8b, 0x3e, 0x31, 0x93, 0x29, 0xbc, 0x19, 0x28, 0xd4, 0x03,
	0x99, 0xf0, 0xdb, 0x94, 0x33, 0x83, 0xdc, 0xff, 0x0f, 0xfe, 0x90, 0x09, 0x5f, 0xe6, 0xf3, 0x63,
	0x36, 0xa2, 0xd5, 0xa4, 0x55, 0x11, 0x8e, 0x57, 0xa8, 0x2a, 0x4e, 0xb5, 0x92, 0x0c, 0x39, 0xec,
	0x77, 0x32, 0x33, 0x90, 0x4a, 0x98, 0xc9, 0xb4, 0xfe, 0xdf, 0x70, 0x90, 0x2a, 0x1c, 0x09, 0x99,
	0xe9, 0x19, 0x57, 0x5c, 0x61, 0x99, 0xf0, 0x43, 0xa8, 0x11, 0x8e, 0xe7, 0x89, 0x95, 0x3c, 0xf1,
	0x19, 0x16, 0x06, 0x70, 0x78, 0xc5, 0x32, 0x8d, 0xe7, 0x99, 0x22, 0x41, 0xfd, 0x0e, 0xf1, 0xae,
	0x20, 0x23, 0xa8, 0x1f, 0x1e, 0x43, 0x70, 0x4b, 0xe9, 0x8b, 0x5c, 0xae, 0xba, 0x46, 0xe2, 0x8e,
	0x89, 0x30, 0x46, 0x31, 0xb2, 0xdc, 0x09, 0x1c, 0x17, 0xba, 0x55, 0xec, 0x97, 0x0a, 0xfc, 0x76,
	0x81, 0xa9, 0xd4, 0xc2, 0xbc, 0x91, 0xca, 0x9e, 0xec, 0xff, 0x0e, 0x9b, 0x24, 0x29, 0xc6, 0xc2,
	0x44, 0x17, 0xf8, 0x27, 0xb0, 0xd3, 0xcb, 0x14, 0xdd, 0xc8, 0x3b, 0xa4, 0xa2, 0xf3, 0x39, 0xe0,
	0x1f, 0x42, 0x95, 0x0d, 0x65, 0x46, 0x26, 0x58, 0xcf, 0x45, 0x45, 0x64, 0x55, 0xdc, 0x9d, 0x2e,
	0x55, 0xb0, 0xe1, 0x54, 0x33, 0xc0, 0xff, 0x13, 0xf6, 0x86, 0x82, 0x4c, 0x84, 0xb1, 0x48, 0x05,
	0x92, 0x09, 0x36, 0x9b, 0xde, 0x69, 0x2d, 0x7a, 0x0e, 0x5a, 0x93, 0x39, 0x6a, 0x23, 0x88, 0x19,
	0x21, 0xe9, 0x42, 0x0e, 0x99, 0xa0, 0xa0, 0xda, 0xf4, 0x4e, 0xf7, 0xa2, 0x65, 0xc2, 0xff, 0x1f,
	0x8e, 0x4a, 0x60, 0xde, 0x5d, 0x17, 0xb5, 0x46, 0xea, 0xa3, 0x0a, 0xb6, 0xf2, 0xf3, 0x5f, 0x4e,
	0x58, 0xa8, 0xf5, 0x8a, 0x25, 0x09, 0xaa, 0x60, 0x3b, 0x57, 0x2d, 0x13, 0xe1, 0x10, 0xea, 0xf6,
	0x05, 0x3a, 0xc4, 0xdf, 0x09, 0x33, 0xe0, 0x8a, 0x8d, 0x97, 0xaf, 0xe4, 0xa6, 0x61, 0xe1, 0x4a,
	0x73, 0xbb, 0x2a, 0x8b, 0x76, 0xd9, 0x44, 0x67, 0xf2, 0xba, 0xb3, 0x6b, 0x06, 0x84, 0x63, 0xa8,
	0xe7, 0x1f, 0x57, 0x4c, 0xa8, 0x4b, 0x41, 0x77, 0xc8, 0xfd, 0x06, 0x40, 0x22, 0x63, 0x96, 0x38,
	0x85, 0xab, 0x55, 0x42, 0xec, 0xc8, 0x29, 0x1c, 0x4a, 0x83, 0x85, 0x6d, 0x95, 0xdc, 0xb6, 0x67,
	0x98, 0xdf, 0x84, 0x5d, 0x17, 0x97, 0xcb, 0x96, 0xa1, 0x70, 0x02, 0x07, 0xb3, 0xc2, 0xb7, 0x94,
	0xfc, 0xca, 0xd2, 0x7f, 0xc1, 0xae, 0x7d, 0x1d, 0xd6, 0xb7, 0xd3, 0x6b, 0xfc, 0x00, 0xb6, 0x86,
	0x2e, 0xcc, 0x2b, 0xd6, 0xa2, 0x69, 0x18, 0x7e, 0xf6, 0xa0, 0x5e, 0x64, 0xba, 0xe9, 0x46, 0x6e,
	0x6d, 0x8e, 0xdd, 0x13, 0xba, 0xf6, 0x8a, 0xc8, 0xb6, 0xa6, 0x65, 0xa6, 0xe2, 0x85, 0xd6, 0xca,
	0xd8, 0xfc, 0x2f, 0x58, 0x2f, 0xff, 0x05, 0x87, 0x50, 0xd5, 0x48, 0x1c, 0xdd, 0x30, 0xd7, 0xa2,
	0x22, 0xb2, 0x17, 0x29, 0x1a, 0x39, 0x97, 0x7c, 0x52, 0xcc, 0x71, 0x19, 0x0a, 0xdf, 0xc2, 0x51,
	0x97, 0xdd, 0x77, 0xe7, 0xc8, 0xb5, 0xf8, 0x80, 0xa5, 0x3d, 0x46, 0x38, 0x5e, 0xe6, 0xa7, 0x7b,
	0x6c, 0x25, 0x79, 0x7e, 0xf9, 0xf5, 0xb1, 0xe1, 0x3d, 0x3c, 0x36, 0xbc, 0xef, 0x8f, 0x0d, 0xef,
	0xd3, 0x53, 0x63, 0xed, 0xe1, 0xa9, 0xb1, 0xf6, 0xed, 0xa9, 0xb1, 0xf6, 0xfe, 0x9f, 0xbe, 0x30,
	0x83, 0xac, 0xd7, 0x8a, 0xe5, 0xb0, 0xad, 0x8d, 0x62, 0xd4, 0xc7, 0x44, 0x8e, 0xf0, 0xcc, 0x2e,
	0xf1, 0x4c, 0xa1, 0x6e, 0xe7, 0x0b, 0xbc, 0x7d, 0xdf, 0xce, 0x77, 0xbb, 0x99, 0xa4, 0xa8, 0x7b,
	0xd5, 0x7c, 0xb7, 0xff, 0xfb, 0x23, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xac, 0x17, 0xfa, 0xf0, 0x05,
	0x00, 0x00,
}

func (m *AttesterEnabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attester) > 0 {
		i -= len(m.Attester)
		copy(dAtA[i:], m.Attester)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Attester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttesterDisabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attester) > 0 {
		i -= len(m.Attester)
		copy(dAtA[i:], m.Attester)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Attester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureThresholdUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureThresholdUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureThresholdUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewSignatureThreshold != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewSignatureThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.OldSignatureThreshold != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OldSignatureThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthorityUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorityUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorityUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewAuthority) > 0 {
		i -= len(m.NewAuthority)
		copy(dAtA[i:], m.NewAuthority)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewAuthority)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreviousAuthority) > 0 {
		i -= len(m.PreviousAuthority)
		copy(dAtA[i:], m.PreviousAuthority)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PreviousAuthority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PauseBurningAndMinting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseBurningAndMinting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseBurningAndMinting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UnpauseBurningAndMinting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnpauseBurningAndMinting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnpauseBurningAndMinting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PauseSendingAndReceiving) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseSendingAndReceiving) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseSendingAndReceiving) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UnpauseSendingAndReceiving) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnpauseSendingAndReceiving) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnpauseSendingAndReceiving) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DepositForBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositForBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositForBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCaller) > 0 {
		i -= len(m.DestinationCaller)
		copy(dAtA[i:], m.DestinationCaller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationCaller)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DestinationTokenMessenger) > 0 {
		i -= len(m.DestinationTokenMessenger)
		copy(dAtA[i:], m.DestinationTokenMessenger)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationTokenMessenger)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BurnToken) > 0 {
		i -= len(m.BurnToken)
		copy(dAtA[i:], m.BurnToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BurnToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MintAndWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintAndWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintAndWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintToken) > 0 {
		i -= len(m.MintToken)
		copy(dAtA[i:], m.MintToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MintToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenPairLinked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPairLinked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPairLinked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteToken) > 0 {
		i -= len(m.RemoteToken)
		copy(dAtA[i:], m.RemoteToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RemoteToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RemoteDomain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LocalToken) > 0 {
		i -= len(m.LocalToken)
		copy(dAtA[i:], m.LocalToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LocalToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenPairUnlinked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPairUnlinked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPairUnlinked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteToken) > 0 {
		i -= len(m.RemoteToken)
		copy(dAtA[i:], m.RemoteToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RemoteToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RemoteDomain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LocalToken) > 0 {
		i -= len(m.LocalToken)
		copy(dAtA[i:], m.LocalToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LocalToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageBody) > 0 {
		i -= len(m.MessageBody)
		copy(dAtA[i:], m.MessageBody)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MessageBody)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceDomain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaxMessageBodySizeUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxMessageBodySizeUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxMessageBodySizeUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewMaxMessageBodySize != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewMaxMessageBodySize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttesterEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attester)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *AttesterDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attester)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *SignatureThresholdUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldSignatureThreshold != 0 {
		n += 1 + sovEvents(uint64(m.OldSignatureThreshold))
	}
	if m.NewSignatureThreshold != 0 {
		n += 1 + sovEvents(uint64(m.NewSignatureThreshold))
	}
	return n
}

func (m *AuthorityUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreviousAuthority)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewAuthority)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *PauseBurningAndMinting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnpauseBurningAndMinting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PauseSendingAndReceiving) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnpauseSendingAndReceiving) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DepositForBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovEvents(uint64(m.Nonce))
	}
	l = len(m.BurnToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovEvents(uint64(m.DestinationDomain))
	}
	l = len(m.DestinationTokenMessenger)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestinationCaller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *MintAndWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	l = len(m.MintToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TokenPairLinked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RemoteDomain != 0 {
		n += 1 + sovEvents(uint64(m.RemoteDomain))
	}
	l = len(m.RemoteToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TokenPairUnlinked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RemoteDomain != 0 {
		n += 1 + sovEvents(uint64(m.RemoteDomain))
	}
	l = len(m.RemoteToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *MessageSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *MessageReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SourceDomain != 0 {
		n += 1 + sovEvents(uint64(m.SourceDomain))
	}
	if m.Nonce != 0 {
		n += 1 + sovEvents(uint64(m.Nonce))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MessageBody)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *MaxMessageBodySizeUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewMaxMessageBodySize != 0 {
		n += 1 + sovEvents(uint64(m.NewMaxMessageBodySize))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttesterEnabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterEnabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterEnabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttesterDisabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterDisabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterDisabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureThresholdUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureThresholdUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureThresholdUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSignatureThreshold", wireType)
			}
			m.OldSignatureThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldSignatureThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSignatureThreshold", wireType)
			}
			m.NewSignatureThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSignatureThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorityUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorityUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorityUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousAuthority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousAuthority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAuthority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAuthority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseBurningAndMinting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseBurningAndMinting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseBurningAndMinting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnpauseBurningAndMinting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnpauseBurningAndMinting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnpauseBurningAndMinting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseSendingAndReceiving) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseSendingAndReceiving: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseSendingAndReceiving: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnpauseSendingAndReceiving) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnpauseSendingAndReceiving: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnpauseSendingAndReceiving: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositForBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositForBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositForBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = append(m.MintRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.MintRecipient == nil {
				m.MintRecipient = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTokenMessenger", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTokenMessenger = append(m.DestinationTokenMessenger[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationTokenMessenger == nil {
				m.DestinationTokenMessenger = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCaller = append(m.DestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationCaller == nil {
				m.DestinationCaller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintAndWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintAndWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintAndWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPairLinked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPairLinked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPairLinked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPairUnlinked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPairUnlinked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPairUnlinked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomain", wireType)
			}
			m.SourceDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageBody = append(m.MessageBody[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageBody == nil {
				m.MessageBody = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxMessageBodySizeUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxMessageBodySizeUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxMessageBodySizeUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMaxMessageBodySize", wireType)
			}
			m.NewMaxMessageBodySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewMaxMessageBodySize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
