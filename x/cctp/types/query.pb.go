// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: circle/cctp/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAuthorityRequest is the request type for the Query/Authority RPC method.
type QueryGetAuthorityRequest struct {
}

func (m *QueryGetAuthorityRequest) Reset()         { *m = QueryGetAuthorityRequest{} }
func (m *QueryGetAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthorityRequest) ProtoMessage()    {}
func (*QueryGetAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{2}
}
func (m *QueryGetAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthorityRequest.Merge(m, src)
}
func (m *QueryGetAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthorityRequest proto.InternalMessageInfo

// QueryAuthorityResponse is the response type for the Query/Authority RPC method.
type QueryGetAuthorityResponse struct {
	Authority Authority `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority"`
}

func (m *QueryGetAuthorityResponse) Reset()         { *m = QueryGetAuthorityResponse{} }
func (m *QueryGetAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthorityResponse) ProtoMessage()    {}
func (*QueryGetAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{3}
}
func (m *QueryGetAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthorityResponse.Merge(m, src)
}
func (m *QueryGetAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthorityResponse proto.InternalMessageInfo

func (m *QueryGetAuthorityResponse) GetAuthority() Authority {
	if m != nil {
		return m.Authority
	}
	return Authority{}
}

// QueryAttestersRequest is the request type for the Query/Attester RPC method.
type QueryGetAttesterRequest struct {
	Attester string `protobuf:"bytes,1,opt,name=attester,proto3" json:"attester,omitempty"`
}

func (m *QueryGetAttesterRequest) Reset()         { *m = QueryGetAttesterRequest{} }
func (m *QueryGetAttesterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttesterRequest) ProtoMessage()    {}
func (*QueryGetAttesterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{4}
}
func (m *QueryGetAttesterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttesterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttesterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttesterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttesterRequest.Merge(m, src)
}
func (m *QueryGetAttesterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttesterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttesterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttesterRequest proto.InternalMessageInfo

func (m *QueryGetAttesterRequest) GetAttester() string {
	if m != nil {
		return m.Attester
	}
	return ""
}

// QueryAttestersResponse is the response type for the Query/Attester RPC method.
type QueryGetAttesterResponse struct {
	Attester Attester `protobuf:"bytes,1,opt,name=attester,proto3" json:"attester"`
}

func (m *QueryGetAttesterResponse) Reset()         { *m = QueryGetAttesterResponse{} }
func (m *QueryGetAttesterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttesterResponse) ProtoMessage()    {}
func (*QueryGetAttesterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{5}
}
func (m *QueryGetAttesterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttesterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttesterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttesterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttesterResponse.Merge(m, src)
}
func (m *QueryGetAttesterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttesterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttesterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttesterResponse proto.InternalMessageInfo

func (m *QueryGetAttesterResponse) GetAttester() Attester {
	if m != nil {
		return m.Attester
	}
	return Attester{}
}

// QueryAllAttestersRequest is the request type for the Query/Attesters RPC method.
type QueryAllAttestersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestersRequest) Reset()         { *m = QueryAllAttestersRequest{} }
func (m *QueryAllAttestersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestersRequest) ProtoMessage()    {}
func (*QueryAllAttestersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{6}
}
func (m *QueryAllAttestersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestersRequest.Merge(m, src)
}
func (m *QueryAllAttestersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestersRequest proto.InternalMessageInfo

func (m *QueryAllAttestersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllAttestersResponse is the response type for the Query/Attesters RPC method.
type QueryAllAttestersResponse struct {
	Attester   []Attester          `protobuf:"bytes,1,rep,name=attester,proto3" json:"attester"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestersResponse) Reset()         { *m = QueryAllAttestersResponse{} }
func (m *QueryAllAttestersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestersResponse) ProtoMessage()    {}
func (*QueryAllAttestersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{7}
}
func (m *QueryAllAttestersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestersResponse.Merge(m, src)
}
func (m *QueryAllAttestersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestersResponse proto.InternalMessageInfo

func (m *QueryAllAttestersResponse) GetAttester() []Attester {
	if m != nil {
		return m.Attester
	}
	return nil
}

func (m *QueryAllAttestersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetMinterAllowanceRequest is the request type for the Query/MinterAllowance RPC method.
type QueryGetMinterAllowanceRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetMinterAllowanceRequest) Reset()         { *m = QueryGetMinterAllowanceRequest{} }
func (m *QueryGetMinterAllowanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinterAllowanceRequest) ProtoMessage()    {}
func (*QueryGetMinterAllowanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{8}
}
func (m *QueryGetMinterAllowanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinterAllowanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinterAllowanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinterAllowanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinterAllowanceRequest.Merge(m, src)
}
func (m *QueryGetMinterAllowanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinterAllowanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinterAllowanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinterAllowanceRequest proto.InternalMessageInfo

func (m *QueryGetMinterAllowanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryGetMinterAllowanceResponse is the response type for the Query/MinterAllowance RPC method.
type QueryGetMinterAllowanceResponse struct {
	Allowance MinterAllowances `protobuf:"bytes,1,opt,name=allowance,proto3" json:"allowance"`
}

func (m *QueryGetMinterAllowanceResponse) Reset()         { *m = QueryGetMinterAllowanceResponse{} }
func (m *QueryGetMinterAllowanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinterAllowanceResponse) ProtoMessage()    {}
func (*QueryGetMinterAllowanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{9}
}
func (m *QueryGetMinterAllowanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinterAllowanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinterAllowanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinterAllowanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinterAllowanceResponse.Merge(m, src)
}
func (m *QueryGetMinterAllowanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinterAllowanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinterAllowanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinterAllowanceResponse proto.InternalMessageInfo

func (m *QueryGetMinterAllowanceResponse) GetAllowance() MinterAllowances {
	if m != nil {
		return m.Allowance
	}
	return MinterAllowances{}
}

// QueryAllMinterAllowancesRequest is the request type for the Query/MinterAllowances RPC method.
type QueryAllMinterAllowancesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMinterAllowancesRequest) Reset()         { *m = QueryAllMinterAllowancesRequest{} }
func (m *QueryAllMinterAllowancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMinterAllowancesRequest) ProtoMessage()    {}
func (*QueryAllMinterAllowancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{10}
}
func (m *QueryAllMinterAllowancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMinterAllowancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMinterAllowancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMinterAllowancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMinterAllowancesRequest.Merge(m, src)
}
func (m *QueryAllMinterAllowancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMinterAllowancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMinterAllowancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMinterAllowancesRequest proto.InternalMessageInfo

func (m *QueryAllMinterAllowancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllMinterAllowancesResponse is the response type for the Query/MinterAllowances RPC method.
type QueryAllMinterAllowancesResponse struct {
	MinterAllowances []MinterAllowances  `protobuf:"bytes,1,rep,name=minter_allowances,json=minterAllowances,proto3" json:"minter_allowances"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMinterAllowancesResponse) Reset()         { *m = QueryAllMinterAllowancesResponse{} }
func (m *QueryAllMinterAllowancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMinterAllowancesResponse) ProtoMessage()    {}
func (*QueryAllMinterAllowancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{11}
}
func (m *QueryAllMinterAllowancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMinterAllowancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMinterAllowancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMinterAllowancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMinterAllowancesResponse.Merge(m, src)
}
func (m *QueryAllMinterAllowancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMinterAllowancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMinterAllowancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMinterAllowancesResponse proto.InternalMessageInfo

func (m *QueryAllMinterAllowancesResponse) GetMinterAllowances() []MinterAllowances {
	if m != nil {
		return m.MinterAllowances
	}
	return nil
}

func (m *QueryAllMinterAllowancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPerMessageBurnLimitRequest is the request type for the Query/PerMessageBurnLimit RPC method.
type QueryGetPerMessageBurnLimitRequest struct {
}

func (m *QueryGetPerMessageBurnLimitRequest) Reset()         { *m = QueryGetPerMessageBurnLimitRequest{} }
func (m *QueryGetPerMessageBurnLimitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPerMessageBurnLimitRequest) ProtoMessage()    {}
func (*QueryGetPerMessageBurnLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{12}
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPerMessageBurnLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPerMessageBurnLimitRequest.Merge(m, src)
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPerMessageBurnLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPerMessageBurnLimitRequest proto.InternalMessageInfo

// QueryPerMessageBurnLimitResponse is the response type for the Query/PerMessageBurnLimit RPC method.
type QueryGetPerMessageBurnLimitResponse struct {
	Amount PerMessageBurnLimit `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryGetPerMessageBurnLimitResponse) Reset()         { *m = QueryGetPerMessageBurnLimitResponse{} }
func (m *QueryGetPerMessageBurnLimitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPerMessageBurnLimitResponse) ProtoMessage()    {}
func (*QueryGetPerMessageBurnLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{13}
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPerMessageBurnLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPerMessageBurnLimitResponse.Merge(m, src)
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPerMessageBurnLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPerMessageBurnLimitResponse proto.InternalMessageInfo

func (m *QueryGetPerMessageBurnLimitResponse) GetAmount() PerMessageBurnLimit {
	if m != nil {
		return m.Amount
	}
	return PerMessageBurnLimit{}
}

// QueryBurningAndMintingPausedRequest is the request type for the Query/BurningAndMintingPaused RPC method.
type QueryGetBurningAndMintingPausedRequest struct {
}

func (m *QueryGetBurningAndMintingPausedRequest) Reset() {
	*m = QueryGetBurningAndMintingPausedRequest{}
}
func (m *QueryGetBurningAndMintingPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBurningAndMintingPausedRequest) ProtoMessage()    {}
func (*QueryGetBurningAndMintingPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{14}
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBurningAndMintingPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBurningAndMintingPausedRequest.Merge(m, src)
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBurningAndMintingPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBurningAndMintingPausedRequest proto.InternalMessageInfo

// QueryBurningAndMintingPausedResponse is the response type for the Query/BurningAndMintingPaused RPC method.
type QueryGetBurningAndMintingPausedResponse struct {
	Paused BurningAndMintingPaused `protobuf:"bytes,1,opt,name=paused,proto3" json:"paused"`
}

func (m *QueryGetBurningAndMintingPausedResponse) Reset() {
	*m = QueryGetBurningAndMintingPausedResponse{}
}
func (m *QueryGetBurningAndMintingPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBurningAndMintingPausedResponse) ProtoMessage()    {}
func (*QueryGetBurningAndMintingPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{15}
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBurningAndMintingPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBurningAndMintingPausedResponse.Merge(m, src)
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBurningAndMintingPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBurningAndMintingPausedResponse proto.InternalMessageInfo

func (m *QueryGetBurningAndMintingPausedResponse) GetPaused() BurningAndMintingPaused {
	if m != nil {
		return m.Paused
	}
	return BurningAndMintingPaused{}
}

// QuerySendingAndReceivingPausedRequest is the request type for the Query/SendingAndReceivingPaused RPC method.
type QueryGetSendingAndReceivingMessagesPausedRequest struct {
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Reset() {
	*m = QueryGetSendingAndReceivingMessagesPausedRequest{}
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetSendingAndReceivingMessagesPausedRequest) ProtoMessage() {}
func (*QueryGetSendingAndReceivingMessagesPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{16}
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest.Merge(m, src)
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest proto.InternalMessageInfo

// QuerySendingAndReceivingPausedResponse is the response type for the Query/SendingAndReceivingPaused RPC method.
type QueryGetSendingAndReceivingMessagesPausedResponse struct {
	Paused SendingAndReceivingMessagesPaused `protobuf:"bytes,1,opt,name=paused,proto3" json:"paused"`
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Reset() {
	*m = QueryGetSendingAndReceivingMessagesPausedResponse{}
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetSendingAndReceivingMessagesPausedResponse) ProtoMessage() {}
func (*QueryGetSendingAndReceivingMessagesPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{17}
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse.Merge(m, src)
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse proto.InternalMessageInfo

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) GetPaused() SendingAndReceivingMessagesPaused {
	if m != nil {
		return m.Paused
	}
	return SendingAndReceivingMessagesPaused{}
}

// QueryMaxMessageBodySizeRequest is the request type for the Query/MaxMessageBodySize RPC method.
type QueryGetMaxMessageBodySizeRequest struct {
}

func (m *QueryGetMaxMessageBodySizeRequest) Reset()         { *m = QueryGetMaxMessageBodySizeRequest{} }
func (m *QueryGetMaxMessageBodySizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMaxMessageBodySizeRequest) ProtoMessage()    {}
func (*QueryGetMaxMessageBodySizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{18}
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMaxMessageBodySizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMaxMessageBodySizeRequest.Merge(m, src)
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMaxMessageBodySizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMaxMessageBodySizeRequest proto.InternalMessageInfo

// QueryMaxMessageBodySizeResponse is the response type for the Query/MaxMessageBodySize RPC method.
type QueryGetMaxMessageBodySizeResponse struct {
	Amount MaxMessageBodySize `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryGetMaxMessageBodySizeResponse) Reset()         { *m = QueryGetMaxMessageBodySizeResponse{} }
func (m *QueryGetMaxMessageBodySizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMaxMessageBodySizeResponse) ProtoMessage()    {}
func (*QueryGetMaxMessageBodySizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{19}
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMaxMessageBodySizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMaxMessageBodySizeResponse.Merge(m, src)
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMaxMessageBodySizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMaxMessageBodySizeResponse proto.InternalMessageInfo

func (m *QueryGetMaxMessageBodySizeResponse) GetAmount() MaxMessageBodySize {
	if m != nil {
		return m.Amount
	}
	return MaxMessageBodySize{}
}

// QuerySignatureThresholdRequest is the request type for the Query/SignatureThreshold RPC method.
type QueryGetSignatureThresholdRequest struct {
}

func (m *QueryGetSignatureThresholdRequest) Reset()         { *m = QueryGetSignatureThresholdRequest{} }
func (m *QueryGetSignatureThresholdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureThresholdRequest) ProtoMessage()    {}
func (*QueryGetSignatureThresholdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{20}
}
func (m *QueryGetSignatureThresholdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureThresholdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureThresholdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureThresholdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureThresholdRequest.Merge(m, src)
}
func (m *QueryGetSignatureThresholdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureThresholdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureThresholdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureThresholdRequest proto.InternalMessageInfo

// QuerySignatureThresholdResponse is the response type for the Query/SignatureThreshold RPC method.
type QueryGetSignatureThresholdResponse struct {
	Amount SignatureThreshold `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryGetSignatureThresholdResponse) Reset()         { *m = QueryGetSignatureThresholdResponse{} }
func (m *QueryGetSignatureThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureThresholdResponse) ProtoMessage()    {}
func (*QueryGetSignatureThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{21}
}
func (m *QueryGetSignatureThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureThresholdResponse.Merge(m, src)
}
func (m *QueryGetSignatureThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureThresholdResponse proto.InternalMessageInfo

func (m *QueryGetSignatureThresholdResponse) GetAmount() SignatureThreshold {
	if m != nil {
		return m.Amount
	}
	return SignatureThreshold{}
}

// QueryTokenPairRequest is the request type for the Query/TokenPair RPC method.
type QueryGetTokenPairRequest struct {
	RemoteDomain uint32 `protobuf:"varint,1,opt,name=remote_domain,json=remoteDomain,proto3" json:"remote_domain,omitempty"`
	RemoteToken  string `protobuf:"bytes,2,opt,name=remote_token,json=remoteToken,proto3" json:"remote_token,omitempty"`
}

func (m *QueryGetTokenPairRequest) Reset()         { *m = QueryGetTokenPairRequest{} }
func (m *QueryGetTokenPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenPairRequest) ProtoMessage()    {}
func (*QueryGetTokenPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{22}
}
func (m *QueryGetTokenPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenPairRequest.Merge(m, src)
}
func (m *QueryGetTokenPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenPairRequest proto.InternalMessageInfo

func (m *QueryGetTokenPairRequest) GetRemoteDomain() uint32 {
	if m != nil {
		return m.RemoteDomain
	}
	return 0
}

func (m *QueryGetTokenPairRequest) GetRemoteToken() string {
	if m != nil {
		return m.RemoteToken
	}
	return ""
}

// QueryTokenPairResponse is the response type for the Query/TokenPair RPC method.
type QueryGetTokenPairResponse struct {
	Pair TokenPairs `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair"`
}

func (m *QueryGetTokenPairResponse) Reset()         { *m = QueryGetTokenPairResponse{} }
func (m *QueryGetTokenPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenPairResponse) ProtoMessage()    {}
func (*QueryGetTokenPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{23}
}
func (m *QueryGetTokenPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenPairResponse.Merge(m, src)
}
func (m *QueryGetTokenPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenPairResponse proto.InternalMessageInfo

func (m *QueryGetTokenPairResponse) GetPair() TokenPairs {
	if m != nil {
		return m.Pair
	}
	return TokenPairs{}
}

// QueryTokenPairsRequest is the request type for the Query/TokenPairs RPC method.
type QueryAllTokenPairsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenPairsRequest) Reset()         { *m = QueryAllTokenPairsRequest{} }
func (m *QueryAllTokenPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenPairsRequest) ProtoMessage()    {}
func (*QueryAllTokenPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{24}
}
func (m *QueryAllTokenPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenPairsRequest.Merge(m, src)
}
func (m *QueryAllTokenPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenPairsRequest proto.InternalMessageInfo

func (m *QueryAllTokenPairsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenPairsResponse is the response type for the Query/TokenPairs RPC method.
type QueryAllTokenPairsResponse struct {
	TokenPairs []TokenPairs        `protobuf:"bytes,1,rep,name=token_pairs,json=tokenPairs,proto3" json:"token_pairs"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenPairsResponse) Reset()         { *m = QueryAllTokenPairsResponse{} }
func (m *QueryAllTokenPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenPairsResponse) ProtoMessage()    {}
func (*QueryAllTokenPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{25}
}
func (m *QueryAllTokenPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenPairsResponse.Merge(m, src)
}
func (m *QueryAllTokenPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenPairsResponse proto.InternalMessageInfo

func (m *QueryAllTokenPairsResponse) GetTokenPairs() []TokenPairs {
	if m != nil {
		return m.TokenPairs
	}
	return nil
}

func (m *QueryAllTokenPairsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetTokenMessengerRequest is the request type for the Query/TokenMessenger RPC method.
type QueryGetTokenMessengerRequest struct {
	DomainId uint32 `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (m *QueryGetTokenMessengerRequest) Reset()         { *m = QueryGetTokenMessengerRequest{} }
func (m *QueryGetTokenMessengerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenMessengerRequest) ProtoMessage()    {}
func (*QueryGetTokenMessengerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{26}
}
func (m *QueryGetTokenMessengerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenMessengerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenMessengerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenMessengerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenMessengerRequest.Merge(m, src)
}
func (m *QueryGetTokenMessengerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenMessengerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenMessengerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenMessengerRequest proto.InternalMessageInfo

func (m *QueryGetTokenMessengerRequest) GetDomainId() uint32 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

// QueryGetTokenMessengerResponse is the response type for the Query/TokenMessenger RPC method.
type QueryGetTokenMessengerResponse struct {
	TokenMessenger TokenMessenger `protobuf:"bytes,1,opt,name=token_messenger,json=tokenMessenger,proto3" json:"token_messenger"`
}

func (m *QueryGetTokenMessengerResponse) Reset()         { *m = QueryGetTokenMessengerResponse{} }
func (m *QueryGetTokenMessengerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenMessengerResponse) ProtoMessage()    {}
func (*QueryGetTokenMessengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{27}
}
func (m *QueryGetTokenMessengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenMessengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenMessengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenMessengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenMessengerResponse.Merge(m, src)
}
func (m *QueryGetTokenMessengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenMessengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenMessengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenMessengerResponse proto.InternalMessageInfo

func (m *QueryGetTokenMessengerResponse) GetTokenMessenger() TokenMessenger {
	if m != nil {
		return m.TokenMessenger
	}
	return TokenMessenger{}
}

// QueryAllTokenMessengersRequest is the request type for the Query/TokenMessengers RPC method.
type QueryAllTokenMessengersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenMessengersRequest) Reset()         { *m = QueryAllTokenMessengersRequest{} }
func (m *QueryAllTokenMessengersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenMessengersRequest) ProtoMessage()    {}
func (*QueryAllTokenMessengersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{28}
}
func (m *QueryAllTokenMessengersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenMessengersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenMessengersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenMessengersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenMessengersRequest.Merge(m, src)
}
func (m *QueryAllTokenMessengersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenMessengersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenMessengersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenMessengersRequest proto.InternalMessageInfo

func (m *QueryAllTokenMessengersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllTokenMessengersResponse is the response type for the Query/TokenMessengers RPC method.
type QueryAllTokenMessengersResponse struct {
	TokenMessengers []TokenMessenger    `protobuf:"bytes,1,rep,name=token_messengers,json=tokenMessengers,proto3" json:"token_messengers"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenMessengersResponse) Reset()         { *m = QueryAllTokenMessengersResponse{} }
func (m *QueryAllTokenMessengersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenMessengersResponse) ProtoMessage()    {}
func (*QueryAllTokenMessengersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{29}
}
func (m *QueryAllTokenMessengersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenMessengersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenMessengersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenMessengersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenMessengersResponse.Merge(m, src)
}
func (m *QueryAllTokenMessengersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenMessengersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenMessengersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenMessengersResponse proto.InternalMessageInfo

func (m *QueryAllTokenMessengersResponse) GetTokenMessengers() []TokenMessenger {
	if m != nil {
		return m.TokenMessengers
	}
	return nil
}

func (m *QueryAllTokenMessengersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "circle.cctp.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "circle.cctp.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetAuthorityRequest)(nil), "circle.cctp.v1.QueryGetAuthorityRequest")
	proto.RegisterType((*QueryGetAuthorityResponse)(nil), "circle.cctp.v1.QueryGetAuthorityResponse")
	proto.RegisterType((*QueryGetAttesterRequest)(nil), "circle.cctp.v1.QueryGetAttesterRequest")
	proto.RegisterType((*QueryGetAttesterResponse)(nil), "circle.cctp.v1.QueryGetAttesterResponse")
	proto.RegisterType((*QueryAllAttestersRequest)(nil), "circle.cctp.v1.QueryAllAttestersRequest")
	proto.RegisterType((*QueryAllAttestersResponse)(nil), "circle.cctp.v1.QueryAllAttestersResponse")
	proto.RegisterType((*QueryGetMinterAllowanceRequest)(nil), "circle.cctp.v1.QueryGetMinterAllowanceRequest")
	proto.RegisterType((*QueryGetMinterAllowanceResponse)(nil), "circle.cctp.v1.QueryGetMinterAllowanceResponse")
	proto.RegisterType((*QueryAllMinterAllowancesRequest)(nil), "circle.cctp.v1.QueryAllMinterAllowancesRequest")
	proto.RegisterType((*QueryAllMinterAllowancesResponse)(nil), "circle.cctp.v1.QueryAllMinterAllowancesResponse")
	proto.RegisterType((*QueryGetPerMessageBurnLimitRequest)(nil), "circle.cctp.v1.QueryGetPerMessageBurnLimitRequest")
	proto.RegisterType((*QueryGetPerMessageBurnLimitResponse)(nil), "circle.cctp.v1.QueryGetPerMessageBurnLimitResponse")
	proto.RegisterType((*QueryGetBurningAndMintingPausedRequest)(nil), "circle.cctp.v1.QueryGetBurningAndMintingPausedRequest")
	proto.RegisterType((*QueryGetBurningAndMintingPausedResponse)(nil), "circle.cctp.v1.QueryGetBurningAndMintingPausedResponse")
	proto.RegisterType((*QueryGetSendingAndReceivingMessagesPausedRequest)(nil), "circle.cctp.v1.QueryGetSendingAndReceivingMessagesPausedRequest")
	proto.RegisterType((*QueryGetSendingAndReceivingMessagesPausedResponse)(nil), "circle.cctp.v1.QueryGetSendingAndReceivingMessagesPausedResponse")
	proto.RegisterType((*QueryGetMaxMessageBodySizeRequest)(nil), "circle.cctp.v1.QueryGetMaxMessageBodySizeRequest")
	proto.RegisterType((*QueryGetMaxMessageBodySizeResponse)(nil), "circle.cctp.v1.QueryGetMaxMessageBodySizeResponse")
	proto.RegisterType((*QueryGetSignatureThresholdRequest)(nil), "circle.cctp.v1.QueryGetSignatureThresholdRequest")
	proto.RegisterType((*QueryGetSignatureThresholdResponse)(nil), "circle.cctp.v1.QueryGetSignatureThresholdResponse")
	proto.RegisterType((*QueryGetTokenPairRequest)(nil), "circle.cctp.v1.QueryGetTokenPairRequest")
	proto.RegisterType((*QueryGetTokenPairResponse)(nil), "circle.cctp.v1.QueryGetTokenPairResponse")
	proto.RegisterType((*QueryAllTokenPairsRequest)(nil), "circle.cctp.v1.QueryAllTokenPairsRequest")
	proto.RegisterType((*QueryAllTokenPairsResponse)(nil), "circle.cctp.v1.QueryAllTokenPairsResponse")
	proto.RegisterType((*QueryGetTokenMessengerRequest)(nil), "circle.cctp.v1.QueryGetTokenMessengerRequest")
	proto.RegisterType((*QueryGetTokenMessengerResponse)(nil), "circle.cctp.v1.QueryGetTokenMessengerResponse")
	proto.RegisterType((*QueryAllTokenMessengersRequest)(nil), "circle.cctp.v1.QueryAllTokenMessengersRequest")
	proto.RegisterType((*QueryAllTokenMessengersResponse)(nil), "circle.cctp.v1.QueryAllTokenMessengersResponse")
}

func init() { proto.RegisterFile("circle/cctp/v1/query.proto", fileDescriptor_e7468ed27f019b2f) }

var fileDescriptor_e7468ed27f019b2f = []byte{
	// 1439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xcf, 0xf2, 0x85, 0x08, 0x4f, 0xbe, 0x40, 0x3a, 0x20, 0x08, 0x9b, 0x62, 0x92, 0x35, 0x24,
	0x21, 0xc0, 0x0e, 0x36, 0x94, 0x4a, 0x88, 0x4a, 0x38, 0xa2, 0x45, 0x55, 0x89, 0x1a, 0x1c, 0xd4,
	0x03, 0x17, 0x6b, 0x6d, 0x4f, 0x37, 0xab, 0xda, 0x33, 0x66, 0x77, 0x9c, 0x12, 0x50, 0x2e, 0x6d,
	0x0f, 0x95, 0x7a, 0xa9, 0xd4, 0x7f, 0x80, 0x43, 0x2b, 0xa1, 0x1e, 0xfa, 0x0f, 0xb4, 0xaa, 0x7a,
	0xe4, 0x88, 0xd4, 0x4b, 0x4f, 0xa8, 0x82, 0xfe, 0x21, 0xd5, 0xce, 0xbe, 0xd9, 0x8d, 0x67, 0x77,
	0x62, 0x47, 0xf5, 0x6d, 0x77, 0xe6, 0xfd, 0xf8, 0xbc, 0xf7, 0x66, 0xdf, 0xfb, 0xec, 0x20, 0xbb,
	0x1d, 0x84, 0xed, 0x2e, 0x25, 0xed, 0xb6, 0xe8, 0x93, 0xed, 0x2a, 0x79, 0x3c, 0xa0, 0xe1, 0x8e,
	0xdb, 0x0f, 0xb9, 0xe0, 0xf8, 0x78, 0xb2, 0xe7, 0xc6, 0x7b, 0xee, 0x76, 0xd5, 0x2e, 0x6b, 0xb2,
	0xde, 0x40, 0x6c, 0xf1, 0x30, 0x10, 0x20, 0x6f, 0x13, 0x6d, 0xbf, 0x35, 0x08, 0x59, 0xc0, 0xfc,
	0xa6, 0xc7, 0x3a, 0xcd, 0x5e, 0xc0, 0x44, 0xfc, 0xdc, 0xf7, 0x06, 0x11, 0xed, 0x80, 0xc2, 0xaa,
	0xa6, 0xd0, 0xf3, 0x9e, 0x34, 0x7b, 0x34, 0x8a, 0x3c, 0x9f, 0x36, 0x5b, 0xbc, 0xb3, 0xd3, 0x8c,
	0x82, 0xa7, 0x14, 0x64, 0x97, 0x74, 0xd9, 0x80, 0x09, 0x1a, 0x36, 0xbd, 0x6e, 0x97, 0x7f, 0xe9,
	0xb1, 0x36, 0x8d, 0x40, 0x6e, 0x5e, 0x93, 0xeb, 0x7b, 0xa1, 0xd7, 0x53, 0x9b, 0x97, 0xf5, 0x4d,
	0x1a, 0x66, 0x0e, 0x07, 0x21, 0x6b, 0x76, 0x83, 0x5e, 0x20, 0x40, 0xf8, 0x9c, 0x1e, 0xae, 0x10,
	0x34, 0x12, 0x34, 0x84, 0xed, 0x5b, 0xda, 0x76, 0x44, 0x59, 0x47, 0x45, 0x1b, 0xd2, 0x36, 0x0d,
	0xb6, 0xe3, 0x37, 0xb0, 0x1e, 0x0d, 0x07, 0xbe, 0xa2, 0xeb, 0x06, 0x3e, 0xf3, 0xc4, 0x20, 0xa4,
	0x4d, 0xb1, 0x15, 0xd2, 0x68, 0x8b, 0x77, 0x95, 0xe4, 0x82, 0x26, 0x29, 0xf8, 0x17, 0x94, 0x35,
	0xfb, 0x5e, 0x10, 0xaa, 0x98, 0x2e, 0x14, 0x4a, 0xc4, 0x7e, 0x29, 0xf3, 0x53, 0xb4, 0xab, 0x6d,
	0x1e, 0xf5, 0x78, 0x44, 0x5a, 0x5e, 0x44, 0x93, 0x22, 0x93, 0xed, 0x6a, 0x8b, 0x0a, 0x2f, 0xce,
	0x90, 0x1f, 0x30, 0x4f, 0x04, 0x9c, 0x81, 0xec, 0x29, 0x9f, 0xfb, 0x5c, 0x3e, 0x92, 0xf8, 0x09,
	0x56, 0xdf, 0xf5, 0x39, 0xf7, 0xbb, 0x94, 0x78, 0xfd, 0x80, 0x78, 0x8c, 0x71, 0x21, 0x55, 0x00,
	0x85, 0x73, 0x0a, 0xe1, 0x07, 0xb1, 0xd5, 0x0d, 0x99, 0xee, 0x06, 0x7d, 0x3c, 0xa0, 0x91, 0x70,
	0x3e, 0x41, 0x27, 0x87, 0x56, 0xa3, 0x3e, 0x67, 0x11, 0xc5, 0x37, 0xd0, 0x74, 0x52, 0x96, 0x39,
	0x6b, 0xc1, 0x5a, 0x99, 0xa9, 0x9d, 0x76, 0x87, 0x4f, 0x9a, 0x9b, 0xc8, 0xaf, 0x1d, 0x7e, 0xf9,
	0xfa, 0xfc, 0x54, 0x03, 0x64, 0x1d, 0x1b, 0xcd, 0x49, 0x63, 0xf7, 0xa8, 0xa8, 0xab, 0x93, 0xa7,
	0x1c, 0x3d, 0x42, 0x67, 0x0b, 0xf6, 0xc0, 0xdd, 0x07, 0xa8, 0x94, 0x1e, 0x55, 0xf0, 0x78, 0x56,
	0xf7, 0x98, 0x6a, 0x81, 0xd3, 0x4c, 0xc3, 0x79, 0x0f, 0x9d, 0x49, 0x6d, 0xc3, 0x11, 0x00, 0xb7,
	0xd8, 0x46, 0x47, 0xd5, 0xa9, 0x90, 0x86, 0x4b, 0x8d, 0xf4, 0xdd, 0xf9, 0x6c, 0x0f, 0xdc, 0x54,
	0x0d, 0x10, 0xdd, 0xd2, 0xf4, 0x66, 0x6a, 0x73, 0x39, 0x40, 0xb0, 0x0f, 0x78, 0x32, 0xbb, 0x2d,
	0xb0, 0x5b, 0xef, 0x76, 0x95, 0x8c, 0xca, 0x37, 0xfe, 0x08, 0xa1, 0xac, 0x9a, 0x60, 0x79, 0xc9,
	0x4d, 0x4a, 0xef, 0xc6, 0xa5, 0x77, 0x93, 0xef, 0x1b, 0x4a, 0xef, 0x6e, 0x78, 0x3e, 0x05, 0xdd,
	0xc6, 0x1e, 0x4d, 0xe7, 0xb9, 0x05, 0xf9, 0x1c, 0x76, 0x52, 0x88, 0xfe, 0x7f, 0x07, 0x41, 0x8f,
	0xef, 0x0d, 0x21, 0x3c, 0x24, 0x11, 0x2e, 0x8f, 0x44, 0x98, 0x38, 0x1e, 0x82, 0x78, 0x13, 0x95,
	0x55, 0x7a, 0xd7, 0x65, 0x2b, 0xa8, 0xab, 0x4e, 0xa0, 0x92, 0x71, 0x0a, 0x1d, 0xe9, 0x50, 0xc6,
	0x7b, 0x50, 0x99, 0xe4, 0xc5, 0xf1, 0xd1, 0x79, 0xa3, 0x1e, 0xc4, 0x77, 0x17, 0x95, 0xd2, 0xb6,
	0x02, 0x49, 0x5c, 0xd0, 0x03, 0xd4, 0x74, 0xa3, 0xf4, 0xd8, 0xa8, 0x15, 0x27, 0x00, 0x47, 0xf5,
	0x6e, 0x57, 0x17, 0x9e, 0x74, 0xb9, 0xfe, 0xb0, 0xd0, 0x82, 0xd9, 0x17, 0x44, 0xb5, 0x89, 0xde,
	0xc9, 0xf5, 0x4c, 0x28, 0xdf, 0xb8, 0xd1, 0xcd, 0xf6, 0xb4, 0xf5, 0xc9, 0x95, 0xf3, 0x02, 0x72,
	0x54, 0x59, 0x36, 0x68, 0xb8, 0x9e, 0x74, 0xcd, 0xb5, 0x41, 0xc8, 0xee, 0xc7, 0x1d, 0x59, 0x7d,
	0xe6, 0x5b, 0xa8, 0xb2, 0xaf, 0x14, 0x84, 0x5a, 0x47, 0xd3, 0x5e, 0x8f, 0x0f, 0x98, 0x80, 0x9c,
	0x56, 0x72, 0xfd, 0x25, 0xaf, 0xac, 0x9a, 0x4d, 0xa2, 0xe8, 0xac, 0xa0, 0x25, 0xe5, 0x69, 0x2d,
	0x19, 0x63, 0x75, 0xd6, 0x59, 0x4f, 0x86, 0xd8, 0x86, 0x6c, 0xe5, 0x0a, 0x53, 0x1f, 0x2d, 0x8f,
	0x94, 0x04, 0x5c, 0x1f, 0xc6, 0x7d, 0x2f, 0x5e, 0x01, 0x5c, 0xcb, 0x3a, 0x2e, 0x83, 0x81, 0xac,
	0x11, 0xc6, 0x6f, 0x4e, 0x0d, 0x5d, 0x53, 0x1e, 0x37, 0x93, 0xa1, 0x53, 0x67, 0x9d, 0x86, 0x1a,
	0x39, 0x10, 0x58, 0x34, 0x8c, 0xf2, 0x1b, 0x0b, 0x55, 0x0f, 0xa0, 0x04, 0x80, 0x3f, 0xd5, 0x00,
	0x57, 0x75, 0xc0, 0x23, 0x4d, 0x69, 0xd0, 0x2b, 0x68, 0x31, 0xfd, 0xfa, 0xbc, 0x27, 0xaa, 0x06,
	0xbc, 0xb3, 0xb3, 0x19, 0x3c, 0x55, 0x47, 0xdb, 0xf9, 0x3c, 0x3b, 0x0b, 0x45, 0x42, 0x80, 0xed,
	0x8e, 0x56, 0x64, 0x27, 0x77, 0x88, 0x73, 0xba, 0x5a, 0x8d, 0xf7, 0x80, 0xd9, 0x54, 0x03, 0xf8,
	0xa1, 0x9a, 0xbf, 0x05, 0x60, 0x8a, 0x84, 0xc6, 0x05, 0x93, 0xd7, 0xd5, 0xc0, 0xb4, 0xb2, 0x71,
	0xf1, 0x30, 0x9e, 0xe0, 0x1b, 0x5e, 0x90, 0x8e, 0x99, 0x0a, 0x3a, 0x16, 0xd2, 0x1e, 0x17, 0xb4,
	0xd9, 0xe1, 0x3d, 0x2f, 0x48, 0x5a, 0xc5, 0xb1, 0xc6, 0xff, 0x93, 0xc5, 0xbb, 0x72, 0x0d, 0x2f,
	0x22, 0x78, 0x6f, 0x4a, 0x06, 0x20, 0x3f, 0xc6, 0x52, 0x63, 0x26, 0x59, 0x93, 0x26, 0x9d, 0x07,
	0xd9, 0x94, 0xdc, 0xe3, 0x23, 0x1d, 0xca, 0x87, 0x63, 0x5a, 0x01, 0x01, 0xd8, 0x7a, 0x00, 0xa9,
	0x82, 0x6a, 0x06, 0x52, 0xda, 0x69, 0x67, 0x83, 0x22, 0x93, 0x98, 0x74, 0x7f, 0x7b, 0x61, 0x21,
	0xbb, 0xc8, 0x4b, 0xfa, 0xb9, 0xcf, 0xec, 0xa1, 0x45, 0xd0, 0xd3, 0x46, 0x07, 0x80, 0x44, 0xba,
	0x32, 0xb9, 0x3e, 0x76, 0x1b, 0x9d, 0x1b, 0x4a, 0xf1, 0xba, 0xe2, 0x61, 0x2a, 0x27, 0xf3, 0xa8,
	0x94, 0x14, 0xb1, 0x19, 0x74, 0xa0, 0x8e, 0x47, 0x93, 0x85, 0x8f, 0x3b, 0x0e, 0xcf, 0x86, 0x9a,
	0xae, 0x0d, 0xb1, 0xae, 0xa3, 0x13, 0x1a, 0xc1, 0x83, 0xbc, 0x96, 0x0b, 0xe3, 0x4d, 0x0d, 0x40,
	0xcc, 0xc7, 0xc5, 0xd0, 0xaa, 0xb3, 0x05, 0x0e, 0x55, 0x62, 0xd3, 0x9d, 0x89, 0xd7, 0xf0, 0x57,
	0x2b, 0x9b, 0x87, 0x39, 0x57, 0x69, 0xbb, 0x99, 0xd5, 0x82, 0x53, 0xd5, 0x1c, 0x2f, 0xba, 0x13,
	0xc3, 0xd1, 0x4d, 0xae, 0xac, 0xb5, 0xdf, 0x66, 0xd1, 0x11, 0x89, 0x1e, 0x3f, 0x46, 0xd3, 0x09,
	0x3b, 0xc5, 0xb9, 0x6f, 0x3c, 0x4f, 0x80, 0xed, 0xca, 0xbe, 0x32, 0x89, 0x23, 0xa7, 0xfc, 0xd5,
	0x9f, 0xff, 0xfc, 0x70, 0x68, 0x0e, 0x9f, 0x26, 0x85, 0xff, 0x2e, 0xf8, 0x6b, 0x0b, 0x95, 0x52,
	0x7e, 0x8a, 0x57, 0x0a, 0x4d, 0x16, 0x90, 0x62, 0xfb, 0xd2, 0x18, 0x92, 0x00, 0x61, 0x51, 0x42,
	0x98, 0xc7, 0x67, 0x89, 0xe9, 0x1f, 0x0f, 0x7f, 0x67, 0xa1, 0xa3, 0x8a, 0xd6, 0xe1, 0x65, 0xa3,
	0xe9, 0x61, 0x86, 0x6c, 0xaf, 0x8c, 0x16, 0x04, 0x08, 0x57, 0x24, 0x84, 0x25, 0x7c, 0x81, 0x18,
	0xfe, 0xbb, 0x22, 0xf2, 0x4c, 0x3d, 0xee, 0x26, 0x39, 0x51, 0x1b, 0x86, 0x9c, 0x14, 0x30, 0x64,
	0x43, 0x4e, 0x8a, 0x68, 0xee, 0x3e, 0x39, 0x49, 0xfd, 0xfe, 0x64, 0xa1, 0x13, 0x1a, 0x57, 0xc2,
	0xae, 0x29, 0xe2, 0x62, 0x9a, 0x6a, 0x93, 0xb1, 0xe5, 0x01, 0x57, 0x55, 0xe2, 0xba, 0x8c, 0x2f,
	0x91, 0x51, 0xbf, 0xc4, 0xe4, 0x99, 0xe4, 0xbc, 0xbb, 0xf8, 0xb9, 0x85, 0x66, 0x75, 0x4e, 0x87,
	0x89, 0x29, 0x15, 0x06, 0xba, 0x6a, 0x5f, 0x1b, 0x5f, 0x01, 0xa0, 0x5e, 0x92, 0x50, 0x2b, 0x78,
	0x71, 0x24, 0x54, 0xfc, 0x8b, 0x85, 0x4e, 0x16, 0xd0, 0x32, 0x5c, 0x33, 0xa5, 0xc7, 0x4c, 0x13,
	0xed, 0xeb, 0x07, 0xd2, 0x01, 0xac, 0xae, 0xc4, 0xba, 0x82, 0x97, 0xc8, 0x58, 0x97, 0x04, 0xf8,
	0x77, 0x0b, 0x9d, 0x31, 0xf0, 0x35, 0x7c, 0xd3, 0x04, 0x60, 0x7f, 0x2e, 0x69, 0xbf, 0x7f, 0x60,
	0x3d, 0x00, 0x5f, 0x93, 0xe0, 0xaf, 0xe0, 0xd5, 0xf1, 0xef, 0x60, 0xf0, 0x6b, 0x0b, 0x2d, 0x8e,
	0xe4, 0x6f, 0xf8, 0x8e, 0x09, 0xd2, 0xb8, 0xd4, 0xd3, 0xae, 0xff, 0x07, 0x0b, 0x10, 0xde, 0x0d,
	0x19, 0x9e, 0x8b, 0xaf, 0x90, 0xb1, 0x2e, 0x5d, 0x20, 0xc0, 0x9f, 0x2d, 0x84, 0xf3, 0x24, 0x10,
	0x57, 0x8d, 0x1f, 0x9c, 0x89, 0x91, 0xda, 0xb5, 0x83, 0xa8, 0x00, 0xe6, 0xab, 0x12, 0xf3, 0x32,
	0xbe, 0x48, 0xc6, 0xb9, 0xe5, 0xc2, 0x2f, 0x2c, 0x84, 0xf3, 0x24, 0xd1, 0x0c, 0xd6, 0xc8, 0x58,
	0xcd, 0x60, 0xcd, 0xfc, 0xd5, 0xb9, 0x2c, 0xc1, 0x5e, 0xc4, 0x15, 0x32, 0xfa, 0x66, 0x0a, 0xff,
	0x68, 0xa1, 0x52, 0xca, 0xa6, 0xcc, 0xf3, 0x48, 0xa7, 0xb1, 0xe6, 0x79, 0x94, 0x23, 0xa3, 0xce,
	0x9a, 0xc4, 0x73, 0x1b, 0xdf, 0x22, 0xe6, 0xfb, 0x2f, 0xf2, 0x6c, 0x88, 0x14, 0xef, 0xa6, 0xef,
	0x52, 0x66, 0x17, 0x7f, 0x6b, 0x21, 0x94, 0x91, 0x3e, 0x6c, 0xec, 0xfc, 0x39, 0xde, 0x6a, 0xaf,
	0x8e, 0x23, 0x0a, 0x48, 0x2b, 0x12, 0xe9, 0x39, 0x3c, 0xbf, 0x0f, 0xd2, 0xb5, 0xfb, 0x2f, 0xdf,
	0x94, 0xad, 0x57, 0x6f, 0xca, 0xd6, 0xdf, 0x6f, 0xca, 0xd6, 0xf7, 0x6f, 0xcb, 0x53, 0xaf, 0xde,
	0x96, 0xa7, 0xfe, 0x7a, 0x5b, 0x9e, 0x7a, 0x54, 0xf3, 0x03, 0xb1, 0x35, 0x68, 0xb9, 0x6d, 0xde,
	0x23, 0x91, 0x08, 0x3d, 0xe6, 0xd3, 0x2e, 0xdf, 0xa6, 0x57, 0xb7, 0x29, 0x8b, 0xb3, 0x1e, 0x11,
	0xc6, 0x5b, 0x5d, 0x4a, 0x9e, 0x24, 0x66, 0xc5, 0x4e, 0x9f, 0x46, 0xad, 0x69, 0x79, 0xe5, 0x76,
	0xfd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x54, 0xf9, 0x6a, 0xbc, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries an Authority by index
	Authority(ctx context.Context, in *QueryGetAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAuthorityResponse, error)
	// Queries an Attester by index
	Attester(ctx context.Context, in *QueryGetAttesterRequest, opts ...grpc.CallOption) (*QueryGetAttesterResponse, error)
	// Queries a list of Attesters
	Attesters(ctx context.Context, in *QueryAllAttestersRequest, opts ...grpc.CallOption) (*QueryAllAttestersResponse, error)
	// Queries a MinterAllowance by index
	MinterAllowance(ctx context.Context, in *QueryGetMinterAllowanceRequest, opts ...grpc.CallOption) (*QueryGetMinterAllowanceResponse, error)
	// Queries a list of MinterAllowances
	MinterAllowances(ctx context.Context, in *QueryAllMinterAllowancesRequest, opts ...grpc.CallOption) (*QueryAllMinterAllowancesResponse, error)
	// Queries a PerMessageBurnLimit by index
	PerMessageBurnLimit(ctx context.Context, in *QueryGetPerMessageBurnLimitRequest, opts ...grpc.CallOption) (*QueryGetPerMessageBurnLimitResponse, error)
	// Queries a BurningAndMintingPaused by index
	BurningAndMintingPaused(ctx context.Context, in *QueryGetBurningAndMintingPausedRequest, opts ...grpc.CallOption) (*QueryGetBurningAndMintingPausedResponse, error)
	// Queries a SendingAndReceivingPaused by index
	SendingAndReceivingMessagesPaused(ctx context.Context, in *QueryGetSendingAndReceivingMessagesPausedRequest, opts ...grpc.CallOption) (*QueryGetSendingAndReceivingMessagesPausedResponse, error)
	// Queries a MaxMessageBodySize by index
	MaxMessageBodySize(ctx context.Context, in *QueryGetMaxMessageBodySizeRequest, opts ...grpc.CallOption) (*QueryGetMaxMessageBodySizeResponse, error)
	// Queries an SignatureThreshold by index
	SignatureThreshold(ctx context.Context, in *QueryGetSignatureThresholdRequest, opts ...grpc.CallOption) (*QueryGetSignatureThresholdResponse, error)
	// Queries a TokenPair by index
	TokenPair(ctx context.Context, in *QueryGetTokenPairRequest, opts ...grpc.CallOption) (*QueryGetTokenPairResponse, error)
	// Queries a list of TokenPairs
	TokenPairs(ctx context.Context, in *QueryAllTokenPairsRequest, opts ...grpc.CallOption) (*QueryAllTokenPairsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Authority(ctx context.Context, in *QueryGetAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAuthorityResponse, error) {
	out := new(QueryGetAuthorityResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/Authority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attester(ctx context.Context, in *QueryGetAttesterRequest, opts ...grpc.CallOption) (*QueryGetAttesterResponse, error) {
	out := new(QueryGetAttesterResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/Attester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attesters(ctx context.Context, in *QueryAllAttestersRequest, opts ...grpc.CallOption) (*QueryAllAttestersResponse, error) {
	out := new(QueryAllAttestersResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/Attesters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinterAllowance(ctx context.Context, in *QueryGetMinterAllowanceRequest, opts ...grpc.CallOption) (*QueryGetMinterAllowanceResponse, error) {
	out := new(QueryGetMinterAllowanceResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/MinterAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinterAllowances(ctx context.Context, in *QueryAllMinterAllowancesRequest, opts ...grpc.CallOption) (*QueryAllMinterAllowancesResponse, error) {
	out := new(QueryAllMinterAllowancesResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/MinterAllowances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerMessageBurnLimit(ctx context.Context, in *QueryGetPerMessageBurnLimitRequest, opts ...grpc.CallOption) (*QueryGetPerMessageBurnLimitResponse, error) {
	out := new(QueryGetPerMessageBurnLimitResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/PerMessageBurnLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurningAndMintingPaused(ctx context.Context, in *QueryGetBurningAndMintingPausedRequest, opts ...grpc.CallOption) (*QueryGetBurningAndMintingPausedResponse, error) {
	out := new(QueryGetBurningAndMintingPausedResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/BurningAndMintingPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendingAndReceivingMessagesPaused(ctx context.Context, in *QueryGetSendingAndReceivingMessagesPausedRequest, opts ...grpc.CallOption) (*QueryGetSendingAndReceivingMessagesPausedResponse, error) {
	out := new(QueryGetSendingAndReceivingMessagesPausedResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/SendingAndReceivingMessagesPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaxMessageBodySize(ctx context.Context, in *QueryGetMaxMessageBodySizeRequest, opts ...grpc.CallOption) (*QueryGetMaxMessageBodySizeResponse, error) {
	out := new(QueryGetMaxMessageBodySizeResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/MaxMessageBodySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureThreshold(ctx context.Context, in *QueryGetSignatureThresholdRequest, opts ...grpc.CallOption) (*QueryGetSignatureThresholdResponse, error) {
	out := new(QueryGetSignatureThresholdResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/SignatureThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPair(ctx context.Context, in *QueryGetTokenPairRequest, opts ...grpc.CallOption) (*QueryGetTokenPairResponse, error) {
	out := new(QueryGetTokenPairResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/TokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairs(ctx context.Context, in *QueryAllTokenPairsRequest, opts ...grpc.CallOption) (*QueryAllTokenPairsResponse, error) {
	out := new(QueryAllTokenPairsResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/TokenPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries an Authority by index
	Authority(context.Context, *QueryGetAuthorityRequest) (*QueryGetAuthorityResponse, error)
	// Queries an Attester by index
	Attester(context.Context, *QueryGetAttesterRequest) (*QueryGetAttesterResponse, error)
	// Queries a list of Attesters
	Attesters(context.Context, *QueryAllAttestersRequest) (*QueryAllAttestersResponse, error)
	// Queries a MinterAllowance by index
	MinterAllowance(context.Context, *QueryGetMinterAllowanceRequest) (*QueryGetMinterAllowanceResponse, error)
	// Queries a list of MinterAllowances
	MinterAllowances(context.Context, *QueryAllMinterAllowancesRequest) (*QueryAllMinterAllowancesResponse, error)
	// Queries a PerMessageBurnLimit by index
	PerMessageBurnLimit(context.Context, *QueryGetPerMessageBurnLimitRequest) (*QueryGetPerMessageBurnLimitResponse, error)
	// Queries a BurningAndMintingPaused by index
	BurningAndMintingPaused(context.Context, *QueryGetBurningAndMintingPausedRequest) (*QueryGetBurningAndMintingPausedResponse, error)
	// Queries a SendingAndReceivingPaused by index
	SendingAndReceivingMessagesPaused(context.Context, *QueryGetSendingAndReceivingMessagesPausedRequest) (*QueryGetSendingAndReceivingMessagesPausedResponse, error)
	// Queries a MaxMessageBodySize by index
	MaxMessageBodySize(context.Context, *QueryGetMaxMessageBodySizeRequest) (*QueryGetMaxMessageBodySizeResponse, error)
	// Queries an SignatureThreshold by index
	SignatureThreshold(context.Context, *QueryGetSignatureThresholdRequest) (*QueryGetSignatureThresholdResponse, error)
	// Queries a TokenPair by index
	TokenPair(context.Context, *QueryGetTokenPairRequest) (*QueryGetTokenPairResponse, error)
	// Queries a list of TokenPairs
	TokenPairs(context.Context, *QueryAllTokenPairsRequest) (*QueryAllTokenPairsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Authority(ctx context.Context, req *QueryGetAuthorityRequest) (*QueryGetAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authority not implemented")
}
func (*UnimplementedQueryServer) Attester(ctx context.Context, req *QueryGetAttesterRequest) (*QueryGetAttesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attester not implemented")
}
func (*UnimplementedQueryServer) Attesters(ctx context.Context, req *QueryAllAttestersRequest) (*QueryAllAttestersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attesters not implemented")
}
func (*UnimplementedQueryServer) MinterAllowance(ctx context.Context, req *QueryGetMinterAllowanceRequest) (*QueryGetMinterAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterAllowance not implemented")
}
func (*UnimplementedQueryServer) MinterAllowances(ctx context.Context, req *QueryAllMinterAllowancesRequest) (*QueryAllMinterAllowancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterAllowances not implemented")
}
func (*UnimplementedQueryServer) PerMessageBurnLimit(ctx context.Context, req *QueryGetPerMessageBurnLimitRequest) (*QueryGetPerMessageBurnLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerMessageBurnLimit not implemented")
}
func (*UnimplementedQueryServer) BurningAndMintingPaused(ctx context.Context, req *QueryGetBurningAndMintingPausedRequest) (*QueryGetBurningAndMintingPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurningAndMintingPaused not implemented")
}
func (*UnimplementedQueryServer) SendingAndReceivingMessagesPaused(ctx context.Context, req *QueryGetSendingAndReceivingMessagesPausedRequest) (*QueryGetSendingAndReceivingMessagesPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendingAndReceivingMessagesPaused not implemented")
}
func (*UnimplementedQueryServer) MaxMessageBodySize(ctx context.Context, req *QueryGetMaxMessageBodySizeRequest) (*QueryGetMaxMessageBodySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxMessageBodySize not implemented")
}
func (*UnimplementedQueryServer) SignatureThreshold(ctx context.Context, req *QueryGetSignatureThresholdRequest) (*QueryGetSignatureThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureThreshold not implemented")
}
func (*UnimplementedQueryServer) TokenPair(ctx context.Context, req *QueryGetTokenPairRequest) (*QueryGetTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPair not implemented")
}
func (*UnimplementedQueryServer) TokenPairs(ctx context.Context, req *QueryAllTokenPairsRequest) (*QueryAllTokenPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Authority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Authority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/Authority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Authority(ctx, req.(*QueryGetAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAttesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/Attester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attester(ctx, req.(*QueryGetAttesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attesters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAttestersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attesters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/Attesters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attesters(ctx, req.(*QueryAllAttestersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinterAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMinterAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinterAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/MinterAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinterAllowance(ctx, req.(*QueryGetMinterAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinterAllowances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMinterAllowancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinterAllowances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/MinterAllowances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinterAllowances(ctx, req.(*QueryAllMinterAllowancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerMessageBurnLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPerMessageBurnLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerMessageBurnLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/PerMessageBurnLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerMessageBurnLimit(ctx, req.(*QueryGetPerMessageBurnLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurningAndMintingPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBurningAndMintingPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurningAndMintingPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/BurningAndMintingPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurningAndMintingPaused(ctx, req.(*QueryGetBurningAndMintingPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendingAndReceivingMessagesPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSendingAndReceivingMessagesPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendingAndReceivingMessagesPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/SendingAndReceivingMessagesPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendingAndReceivingMessagesPaused(ctx, req.(*QueryGetSendingAndReceivingMessagesPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaxMessageBodySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMaxMessageBodySizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaxMessageBodySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/MaxMessageBodySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaxMessageBodySize(ctx, req.(*QueryGetMaxMessageBodySizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignatureThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/SignatureThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureThreshold(ctx, req.(*QueryGetSignatureThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/TokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPair(ctx, req.(*QueryGetTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/TokenPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairs(ctx, req.(*QueryAllTokenPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "circle.cctp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Authority",
			Handler:    _Query_Authority_Handler,
		},
		{
			MethodName: "Attester",
			Handler:    _Query_Attester_Handler,
		},
		{
			MethodName: "Attesters",
			Handler:    _Query_Attesters_Handler,
		},
		{
			MethodName: "MinterAllowance",
			Handler:    _Query_MinterAllowance_Handler,
		},
		{
			MethodName: "MinterAllowances",
			Handler:    _Query_MinterAllowances_Handler,
		},
		{
			MethodName: "PerMessageBurnLimit",
			Handler:    _Query_PerMessageBurnLimit_Handler,
		},
		{
			MethodName: "BurningAndMintingPaused",
			Handler:    _Query_BurningAndMintingPaused_Handler,
		},
		{
			MethodName: "SendingAndReceivingMessagesPaused",
			Handler:    _Query_SendingAndReceivingMessagesPaused_Handler,
		},
		{
			MethodName: "MaxMessageBodySize",
			Handler:    _Query_MaxMessageBodySize_Handler,
		},
		{
			MethodName: "SignatureThreshold",
			Handler:    _Query_SignatureThreshold_Handler,
		},
		{
			MethodName: "TokenPair",
			Handler:    _Query_TokenPair_Handler,
		},
		{
			MethodName: "TokenPairs",
			Handler:    _Query_TokenPairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circle/cctp/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Authority.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAttesterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttesterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttesterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attester) > 0 {
		i -= len(m.Attester)
		copy(dAtA[i:], m.Attester)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Attester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttesterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttesterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttesterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Attester.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Attester) > 0 {
		for iNdEx := len(m.Attester) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attester[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMinterAllowanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinterAllowanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinterAllowanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMinterAllowanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinterAllowanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinterAllowanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Allowance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMinterAllowancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMinterAllowancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMinterAllowancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMinterAllowancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMinterAllowancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMinterAllowancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinterAllowances) > 0 {
		for iNdEx := len(m.MinterAllowances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinterAllowances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPerMessageBurnLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPerMessageBurnLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPerMessageBurnLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPerMessageBurnLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPerMessageBurnLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPerMessageBurnLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBurningAndMintingPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBurningAndMintingPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBurningAndMintingPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBurningAndMintingPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBurningAndMintingPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBurningAndMintingPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Paused.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Paused.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMaxMessageBodySizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMaxMessageBodySizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMaxMessageBodySizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMaxMessageBodySizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMaxMessageBodySizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMaxMessageBodySizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureThresholdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureThresholdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureThresholdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteToken) > 0 {
		i -= len(m.RemoteToken)
		copy(dAtA[i:], m.RemoteToken)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.RemoteDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenPairs) > 0 {
		for iNdEx := len(m.TokenPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenMessengerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenMessengerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenMessengerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DomainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenMessengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenMessengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenMessengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenMessenger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenMessengersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenMessengersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenMessengersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenMessengersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenMessengersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenMessengersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenMessengers) > 0 {
		for iNdEx := len(m.TokenMessengers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenMessengers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Authority.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAttesterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attester)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAttesterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Attester.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAttestersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAttestersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attester) > 0 {
		for _, e := range m.Attester {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMinterAllowanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMinterAllowanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Allowance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMinterAllowancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMinterAllowancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinterAllowances) > 0 {
		for _, e := range m.MinterAllowances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPerMessageBurnLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPerMessageBurnLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBurningAndMintingPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBurningAndMintingPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Paused.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Paused.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMaxMessageBodySizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMaxMessageBodySizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSignatureThresholdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSignatureThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTokenPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoteDomain != 0 {
		n += 1 + sovQuery(uint64(m.RemoteDomain))
	}
	l = len(m.RemoteToken)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokenPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenPairs) > 0 {
		for _, e := range m.TokenPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenMessengerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainId != 0 {
		n += 1 + sovQuery(uint64(m.DomainId))
	}
	return n
}

func (m *QueryGetTokenMessengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenMessenger.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokenMessengersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenMessengersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenMessengers) > 0 {
		for _, e := range m.TokenMessengers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Authority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttesterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttesterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttesterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttesterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttesterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttesterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attester = append(m.Attester, Attester{})
			if err := m.Attester[len(m.Attester)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinterAllowanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinterAllowanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinterAllowanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinterAllowanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinterAllowanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinterAllowanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allowance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMinterAllowancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMinterAllowancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMinterAllowancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMinterAllowancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMinterAllowancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMinterAllowancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterAllowances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterAllowances = append(m.MinterAllowances, MinterAllowances{})
			if err := m.MinterAllowances[len(m.MinterAllowances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPerMessageBurnLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPerMessageBurnLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBurningAndMintingPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBurningAndMintingPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Paused.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Paused.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMaxMessageBodySizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMaxMessageBodySizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureThresholdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPairs = append(m.TokenPairs, TokenPairs{})
			if err := m.TokenPairs[len(m.TokenPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenMessengerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenMessengerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenMessengerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			m.DomainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenMessengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenMessengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenMessengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMessenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenMessenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenMessengersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenMessengersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenMessengersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenMessengersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenMessengersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenMessengersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMessengers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenMessengers = append(m.TokenMessengers, TokenMessenger{})
			if err := m.TokenMessengers[len(m.TokenMessengers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
