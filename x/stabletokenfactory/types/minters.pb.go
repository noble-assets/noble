// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stable/tokenfactory/v1/minters.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Minters struct {
	Address   string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Allowance types.Coin `protobuf:"bytes,2,opt,name=allowance,proto3" json:"allowance"`
}

func (m *Minters) Reset()         { *m = Minters{} }
func (m *Minters) String() string { return proto.CompactTextString(m) }
func (*Minters) ProtoMessage()    {}
func (*Minters) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffd57d80cb5da991, []int{0}
}
func (m *Minters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minters.Merge(m, src)
}
func (m *Minters) XXX_Size() int {
	return m.Size()
}
func (m *Minters) XXX_DiscardUnknown() {
	xxx_messageInfo_Minters.DiscardUnknown(m)
}

var xxx_messageInfo_Minters proto.InternalMessageInfo

func (m *Minters) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Minters) GetAllowance() types.Coin {
	if m != nil {
		return m.Allowance
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Minters)(nil), "stable.tokenfactory.v1.Minters")
}

func init() {
	proto.RegisterFile("stable/tokenfactory/v1/minters.proto", fileDescriptor_ffd57d80cb5da991)
}

var fileDescriptor_ffd57d80cb5da991 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0x63, 0x84, 0xa8, 0x1a, 0xb6, 0x08, 0xa1, 0xd0, 0xc1, 0x54, 0x88, 0xa1, 0x0b, 0x7e,
	0x0a, 0xb0, 0xb2, 0xb4, 0x33, 0x4b, 0x47, 0x24, 0x06, 0xdb, 0x7d, 0x84, 0x88, 0xc4, 0xaf, 0xb2,
	0x5d, 0x43, 0xff, 0x05, 0x3f, 0xab, 0x63, 0x47, 0x26, 0x84, 0x92, 0x3f, 0x82, 0x52, 0x83, 0xa0,
	0xdb, 0xd9, 0xba, 0x7b, 0x9f, 0xee, 0xd2, 0x4b, 0xe7, 0xa5, 0xaa, 0x11, 0x3c, 0xbd, 0xa0, 0x79,
	0x92, 0xda, 0x93, 0x5d, 0x43, 0x28, 0xa0, 0xa9, 0x8c, 0x47, 0xeb, 0xc4, 0xd2, 0x92, 0xa7, 0xec,
	0x34, 0xba, 0xc4, 0x7f, 0x97, 0x08, 0xc5, 0x88, 0x6b, 0x72, 0x0d, 0x39, 0x50, 0xd2, 0x21, 0x84,
	0x42, 0xa1, 0x97, 0x05, 0x68, 0xaa, 0x4c, 0xcc, 0x8d, 0x4e, 0x4a, 0x2a, 0x69, 0x27, 0xa1, 0x57,
	0xf1, 0xf7, 0x42, 0xa5, 0x83, 0xfb, 0x78, 0x3e, 0xcb, 0xd3, 0x81, 0x5c, 0x2c, 0x2c, 0x3a, 0x97,
	0xb3, 0x31, 0x9b, 0x0c, 0xe7, 0xbf, 0xcf, 0xec, 0x2e, 0x1d, 0xca, 0xba, 0xa6, 0x57, 0x69, 0x34,
	0xe6, 0x07, 0x63, 0x36, 0x39, 0xbe, 0x3e, 0x13, 0x11, 0x27, 0x7a, 0x9c, 0xf8, 0xc1, 0x89, 0x19,
	0x55, 0x66, 0x7a, 0xb8, 0xf9, 0x3c, 0x4f, 0xe6, 0x7f, 0x89, 0xe9, 0xe3, 0xa6, 0xe5, 0x6c, 0xdb,
	0x72, 0xf6, 0xd5, 0x72, 0xf6, 0xde, 0xf1, 0x64, 0xdb, 0xf1, 0xe4, 0xa3, 0xe3, 0xc9, 0xc3, 0xac,
	0xac, 0xfc, 0xf3, 0x4a, 0x09, 0x4d, 0x0d, 0x38, 0x6f, 0xa5, 0x29, 0xb1, 0xa6, 0x80, 0x57, 0x01,
	0x8d, 0x5f, 0x59, 0x74, 0x60, 0xa8, 0x1f, 0x24, 0xdc, 0xc2, 0x1b, 0xc4, 0xda, 0x7b, 0xdb, 0xf8,
	0xf5, 0x12, 0x9d, 0x3a, 0xda, 0x35, 0xb9, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x52, 0xe7,
	0x40, 0x3f, 0x01, 0x00, 0x00,
}

func (m *Minters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Allowance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMinters(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMinters(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMinters(dAtA []byte, offset int, v uint64) int {
	offset -= sovMinters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMinters(uint64(l))
	}
	l = m.Allowance.Size()
	n += 1 + l + sovMinters(uint64(l))
	return n
}

func sovMinters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMinters(x uint64) (n int) {
	return sovMinters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allowance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMinters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMinters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMinters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMinters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMinters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMinters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMinters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMinters = fmt.Errorf("proto: unexpected end of group")
)
