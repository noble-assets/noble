// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: router/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetMintRequest struct {
	SourceDomain       uint32 `protobuf:"varint,1,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"`
	SourceDomainSender string `protobuf:"bytes,2,opt,name=source_domain_sender,json=sourceDomainSender,proto3" json:"source_domain_sender,omitempty"`
	Nonce              uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetMintRequest) Reset()         { *m = QueryGetMintRequest{} }
func (m *QueryGetMintRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMintRequest) ProtoMessage()    {}
func (*QueryGetMintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{2}
}
func (m *QueryGetMintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMintRequest.Merge(m, src)
}
func (m *QueryGetMintRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMintRequest proto.InternalMessageInfo

func (m *QueryGetMintRequest) GetSourceDomain() uint32 {
	if m != nil {
		return m.SourceDomain
	}
	return 0
}

func (m *QueryGetMintRequest) GetSourceDomainSender() string {
	if m != nil {
		return m.SourceDomainSender
	}
	return ""
}

func (m *QueryGetMintRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetMintResponse struct {
	Mint Mint `protobuf:"bytes,1,opt,name=mint,proto3" json:"mint"`
}

func (m *QueryGetMintResponse) Reset()         { *m = QueryGetMintResponse{} }
func (m *QueryGetMintResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMintResponse) ProtoMessage()    {}
func (*QueryGetMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{3}
}
func (m *QueryGetMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMintResponse.Merge(m, src)
}
func (m *QueryGetMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMintResponse proto.InternalMessageInfo

func (m *QueryGetMintResponse) GetMint() Mint {
	if m != nil {
		return m.Mint
	}
	return Mint{}
}

type QueryAllMintsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMintsRequest) Reset()         { *m = QueryAllMintsRequest{} }
func (m *QueryAllMintsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMintsRequest) ProtoMessage()    {}
func (*QueryAllMintsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{4}
}
func (m *QueryAllMintsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMintsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMintsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMintsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMintsRequest.Merge(m, src)
}
func (m *QueryAllMintsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMintsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMintsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMintsRequest proto.InternalMessageInfo

func (m *QueryAllMintsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMintsResponse struct {
	Mints      []Mint              `protobuf:"bytes,1,rep,name=mints,proto3" json:"mints"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMintsResponse) Reset()         { *m = QueryAllMintsResponse{} }
func (m *QueryAllMintsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMintsResponse) ProtoMessage()    {}
func (*QueryAllMintsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{5}
}
func (m *QueryAllMintsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMintsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMintsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMintsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMintsResponse.Merge(m, src)
}
func (m *QueryAllMintsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMintsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMintsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMintsResponse proto.InternalMessageInfo

func (m *QueryAllMintsResponse) GetMints() []Mint {
	if m != nil {
		return m.Mints
	}
	return nil
}

func (m *QueryAllMintsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIBCForwardRequest struct {
	SourceDomain       uint32 `protobuf:"varint,1,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"`
	SourceDomainSender string `protobuf:"bytes,2,opt,name=source_domain_sender,json=sourceDomainSender,proto3" json:"source_domain_sender,omitempty"`
	Nonce              uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetIBCForwardRequest) Reset()         { *m = QueryGetIBCForwardRequest{} }
func (m *QueryGetIBCForwardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIBCForwardRequest) ProtoMessage()    {}
func (*QueryGetIBCForwardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{6}
}
func (m *QueryGetIBCForwardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIBCForwardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIBCForwardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIBCForwardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIBCForwardRequest.Merge(m, src)
}
func (m *QueryGetIBCForwardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIBCForwardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIBCForwardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIBCForwardRequest proto.InternalMessageInfo

func (m *QueryGetIBCForwardRequest) GetSourceDomain() uint32 {
	if m != nil {
		return m.SourceDomain
	}
	return 0
}

func (m *QueryGetIBCForwardRequest) GetSourceDomainSender() string {
	if m != nil {
		return m.SourceDomainSender
	}
	return ""
}

func (m *QueryGetIBCForwardRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetIBCForwardResponse struct {
	IbcForward StoreIBCForwardMetadata `protobuf:"bytes,1,opt,name=ibcForward,proto3" json:"ibcForward"`
}

func (m *QueryGetIBCForwardResponse) Reset()         { *m = QueryGetIBCForwardResponse{} }
func (m *QueryGetIBCForwardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIBCForwardResponse) ProtoMessage()    {}
func (*QueryGetIBCForwardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{7}
}
func (m *QueryGetIBCForwardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIBCForwardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIBCForwardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIBCForwardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIBCForwardResponse.Merge(m, src)
}
func (m *QueryGetIBCForwardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIBCForwardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIBCForwardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIBCForwardResponse proto.InternalMessageInfo

func (m *QueryGetIBCForwardResponse) GetIbcForward() StoreIBCForwardMetadata {
	if m != nil {
		return m.IbcForward
	}
	return StoreIBCForwardMetadata{}
}

type QueryAllIBCForwardsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIBCForwardsRequest) Reset()         { *m = QueryAllIBCForwardsRequest{} }
func (m *QueryAllIBCForwardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIBCForwardsRequest) ProtoMessage()    {}
func (*QueryAllIBCForwardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{8}
}
func (m *QueryAllIBCForwardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIBCForwardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIBCForwardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIBCForwardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIBCForwardsRequest.Merge(m, src)
}
func (m *QueryAllIBCForwardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIBCForwardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIBCForwardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIBCForwardsRequest proto.InternalMessageInfo

func (m *QueryAllIBCForwardsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIBCForwardsResponse struct {
	IbcForwards []StoreIBCForwardMetadata `protobuf:"bytes,1,rep,name=ibcForwards,proto3" json:"ibcForwards"`
	Pagination  *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIBCForwardsResponse) Reset()         { *m = QueryAllIBCForwardsResponse{} }
func (m *QueryAllIBCForwardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIBCForwardsResponse) ProtoMessage()    {}
func (*QueryAllIBCForwardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{9}
}
func (m *QueryAllIBCForwardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIBCForwardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIBCForwardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIBCForwardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIBCForwardsResponse.Merge(m, src)
}
func (m *QueryAllIBCForwardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIBCForwardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIBCForwardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIBCForwardsResponse proto.InternalMessageInfo

func (m *QueryAllIBCForwardsResponse) GetIbcForwards() []StoreIBCForwardMetadata {
	if m != nil {
		return m.IbcForwards
	}
	return nil
}

func (m *QueryAllIBCForwardsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInFlightPacketRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId    string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Sequence  uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *QueryGetInFlightPacketRequest) Reset()         { *m = QueryGetInFlightPacketRequest{} }
func (m *QueryGetInFlightPacketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInFlightPacketRequest) ProtoMessage()    {}
func (*QueryGetInFlightPacketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{10}
}
func (m *QueryGetInFlightPacketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInFlightPacketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInFlightPacketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInFlightPacketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInFlightPacketRequest.Merge(m, src)
}
func (m *QueryGetInFlightPacketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInFlightPacketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInFlightPacketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInFlightPacketRequest proto.InternalMessageInfo

func (m *QueryGetInFlightPacketRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *QueryGetInFlightPacketRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *QueryGetInFlightPacketRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type QueryGetInFlightPacketResponse struct {
	InFlightPacket InFlightPacket `protobuf:"bytes,1,opt,name=inFlightPacket,proto3" json:"inFlightPacket"`
}

func (m *QueryGetInFlightPacketResponse) Reset()         { *m = QueryGetInFlightPacketResponse{} }
func (m *QueryGetInFlightPacketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInFlightPacketResponse) ProtoMessage()    {}
func (*QueryGetInFlightPacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{11}
}
func (m *QueryGetInFlightPacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInFlightPacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInFlightPacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInFlightPacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInFlightPacketResponse.Merge(m, src)
}
func (m *QueryGetInFlightPacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInFlightPacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInFlightPacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInFlightPacketResponse proto.InternalMessageInfo

func (m *QueryGetInFlightPacketResponse) GetInFlightPacket() InFlightPacket {
	if m != nil {
		return m.InFlightPacket
	}
	return InFlightPacket{}
}

type QueryAllInFlightPacketsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInFlightPacketsRequest) Reset()         { *m = QueryAllInFlightPacketsRequest{} }
func (m *QueryAllInFlightPacketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInFlightPacketsRequest) ProtoMessage()    {}
func (*QueryAllInFlightPacketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{12}
}
func (m *QueryAllInFlightPacketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInFlightPacketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInFlightPacketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInFlightPacketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInFlightPacketsRequest.Merge(m, src)
}
func (m *QueryAllInFlightPacketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInFlightPacketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInFlightPacketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInFlightPacketsRequest proto.InternalMessageInfo

func (m *QueryAllInFlightPacketsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInFlightPacketsResponse struct {
	InFlightPackets []InFlightPacket    `protobuf:"bytes,1,rep,name=inFlightPackets,proto3" json:"inFlightPackets"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInFlightPacketsResponse) Reset()         { *m = QueryAllInFlightPacketsResponse{} }
func (m *QueryAllInFlightPacketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInFlightPacketsResponse) ProtoMessage()    {}
func (*QueryAllInFlightPacketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248fc3ff0338b430, []int{13}
}
func (m *QueryAllInFlightPacketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInFlightPacketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInFlightPacketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInFlightPacketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInFlightPacketsResponse.Merge(m, src)
}
func (m *QueryAllInFlightPacketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInFlightPacketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInFlightPacketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInFlightPacketsResponse proto.InternalMessageInfo

func (m *QueryAllInFlightPacketsResponse) GetInFlightPackets() []InFlightPacket {
	if m != nil {
		return m.InFlightPackets
	}
	return nil
}

func (m *QueryAllInFlightPacketsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "noble.router.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "noble.router.QueryParamsResponse")
	proto.RegisterType((*QueryGetMintRequest)(nil), "noble.router.QueryGetMintRequest")
	proto.RegisterType((*QueryGetMintResponse)(nil), "noble.router.QueryGetMintResponse")
	proto.RegisterType((*QueryAllMintsRequest)(nil), "noble.router.QueryAllMintsRequest")
	proto.RegisterType((*QueryAllMintsResponse)(nil), "noble.router.QueryAllMintsResponse")
	proto.RegisterType((*QueryGetIBCForwardRequest)(nil), "noble.router.QueryGetIBCForwardRequest")
	proto.RegisterType((*QueryGetIBCForwardResponse)(nil), "noble.router.QueryGetIBCForwardResponse")
	proto.RegisterType((*QueryAllIBCForwardsRequest)(nil), "noble.router.QueryAllIBCForwardsRequest")
	proto.RegisterType((*QueryAllIBCForwardsResponse)(nil), "noble.router.QueryAllIBCForwardsResponse")
	proto.RegisterType((*QueryGetInFlightPacketRequest)(nil), "noble.router.QueryGetInFlightPacketRequest")
	proto.RegisterType((*QueryGetInFlightPacketResponse)(nil), "noble.router.QueryGetInFlightPacketResponse")
	proto.RegisterType((*QueryAllInFlightPacketsRequest)(nil), "noble.router.QueryAllInFlightPacketsRequest")
	proto.RegisterType((*QueryAllInFlightPacketsResponse)(nil), "noble.router.QueryAllInFlightPacketsResponse")
}

func init() { proto.RegisterFile("router/query.proto", fileDescriptor_248fc3ff0338b430) }

var fileDescriptor_248fc3ff0338b430 = []byte{
	// 926 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xa4, 0x49, 0x68, 0x5e, 0xfa, 0x47, 0xbc, 0x1a, 0x48, 0xb7, 0x89, 0x93, 0x6c, 0x05,
	0x31, 0x90, 0xee, 0xd2, 0xc0, 0x17, 0x48, 0x5a, 0xa5, 0xb8, 0x10, 0x14, 0xdc, 0x1b, 0x07, 0xac,
	0xb1, 0x3d, 0xdd, 0xac, 0xba, 0x9e, 0x71, 0x77, 0xc7, 0x81, 0x2a, 0xf2, 0xa5, 0x12, 0x12, 0x07,
	0x0e, 0x95, 0x38, 0xc0, 0xd7, 0xe0, 0x00, 0xe2, 0x23, 0xf4, 0x58, 0x89, 0x0b, 0x27, 0x84, 0x12,
	0x3e, 0x08, 0xda, 0x99, 0xe7, 0xda, 0xe3, 0xac, 0x9d, 0x44, 0x8a, 0xd4, 0xdb, 0xee, 0x7b, 0xbf,
	0x37, 0xef, 0xf7, 0xfe, 0xec, 0x6f, 0x16, 0x30, 0x55, 0x5d, 0x2d, 0xd2, 0xf0, 0x69, 0x57, 0xa4,
	0xcf, 0x82, 0x4e, 0xaa, 0xb4, 0xc2, 0x2b, 0x52, 0x35, 0x12, 0x11, 0x58, 0x8f, 0xf7, 0x51, 0x53,
	0x65, 0x6d, 0x95, 0x85, 0x0d, 0x9e, 0x09, 0x0b, 0x0b, 0x0f, 0xee, 0x36, 0x84, 0xe6, 0x77, 0xc3,
	0x0e, 0x8f, 0x62, 0xc9, 0x75, 0xac, 0xa4, 0x8d, 0xf4, 0x4a, 0x91, 0x8a, 0x94, 0x79, 0x0c, 0xf3,
	0x27, 0xb2, 0x2e, 0x45, 0x4a, 0x45, 0x89, 0x08, 0x79, 0x27, 0x0e, 0xb9, 0x94, 0x4a, 0x9b, 0x90,
	0x8c, 0xbc, 0x6b, 0xc4, 0x20, 0x6e, 0x34, 0xeb, 0x8f, 0x55, 0xfa, 0x1d, 0x4f, 0x5b, 0xf5, 0xb6,
	0xd0, 0xbc, 0xc5, 0x35, 0x27, 0xc8, 0x72, 0x1f, 0x22, 0xeb, 0x8f, 0x93, 0x38, 0xda, 0xd7, 0xf5,
	0x0e, 0x6f, 0x3e, 0x11, 0x9a, 0xdc, 0x6f, 0x93, 0xbb, 0x1d, 0xcb, 0xbe, 0xe9, 0x06, 0x99, 0x3a,
	0x3c, 0xe5, 0x6d, 0xca, 0xe4, 0x97, 0x00, 0xbf, 0xce, 0xf9, 0xef, 0x19, 0x63, 0x4d, 0x3c, 0xed,
	0x8a, 0x4c, 0xfb, 0x55, 0xb8, 0xe1, 0x58, 0xb3, 0x8e, 0x92, 0x99, 0xc0, 0x4d, 0x98, 0xb3, 0xc1,
	0x8b, 0x6c, 0x95, 0x55, 0x16, 0x36, 0x4b, 0xc1, 0x70, 0x57, 0x02, 0x8b, 0xde, 0x9e, 0x79, 0xf9,
	0xcf, 0xca, 0x54, 0x8d, 0x90, 0xfe, 0x73, 0x46, 0x67, 0x3d, 0x10, 0x7a, 0x37, 0x96, 0x9a, 0x52,
	0xe0, 0x6d, 0xb8, 0x9a, 0xa9, 0x6e, 0xda, 0x14, 0xf5, 0x96, 0x6a, 0xf3, 0x58, 0x9a, 0x23, 0xaf,
	0xd6, 0xae, 0x58, 0xe3, 0x7d, 0x63, 0xc3, 0x4f, 0xa0, 0xe4, 0x80, 0xea, 0x99, 0x90, 0x2d, 0x91,
	0x2e, 0x4e, 0xaf, 0xb2, 0xca, 0x7c, 0x0d, 0x87, 0xb1, 0x8f, 0x8c, 0x07, 0x4b, 0x30, 0x2b, 0x95,
	0x6c, 0x8a, 0xc5, 0x4b, 0xab, 0xac, 0x32, 0x53, 0xb3, 0x2f, 0xfe, 0x7d, 0x28, 0xb9, 0x1c, 0xa8,
	0xa0, 0x0d, 0x98, 0xc9, 0x1b, 0x44, 0xe5, 0xa0, 0x5b, 0x4e, 0x8e, 0xa4, 0x62, 0x0c, 0xca, 0xff,
	0x96, 0x4e, 0xd9, 0x4a, 0x92, 0xdc, 0xd7, 0xef, 0x16, 0xee, 0x00, 0x0c, 0xa6, 0x4e, 0x67, 0x7d,
	0x10, 0xd8, 0x15, 0x09, 0xf2, 0x15, 0x09, 0xec, 0x26, 0xd1, 0x8a, 0x04, 0x7b, 0x3c, 0x12, 0x14,
	0x5b, 0x1b, 0x8a, 0xf4, 0x5f, 0x30, 0x78, 0x67, 0x24, 0x01, 0xf1, 0x0c, 0x60, 0x36, 0x67, 0x90,
	0xf7, 0xfd, 0xd2, 0x44, 0xa2, 0x16, 0x86, 0x0f, 0x1c, 0x46, 0xd3, 0x86, 0xd1, 0xfa, 0xa9, 0x8c,
	0x6c, 0x32, 0x87, 0xd2, 0x8f, 0x0c, 0x6e, 0xf6, 0x3b, 0x57, 0xdd, 0xbe, 0xb7, 0x63, 0x77, 0xf1,
	0x8d, 0xcc, 0x30, 0x06, 0xaf, 0x88, 0x09, 0x75, 0xe8, 0x0b, 0x80, 0xb8, 0xd1, 0x24, 0x2b, 0xcd,
	0xe0, 0x7d, 0xb7, 0x4d, 0x8f, 0xb4, 0x4a, 0xc5, 0x20, 0x74, 0x97, 0xbe, 0x27, 0xea, 0xdc, 0x50,
	0xb8, 0xdf, 0xa2, 0x54, 0x5b, 0x49, 0x32, 0xc0, 0x5f, 0xf8, 0xb8, 0x7f, 0x67, 0x70, 0xab, 0x30,
	0x0d, 0x95, 0xb4, 0x0b, 0x0b, 0x03, 0x4e, 0xfd, 0xd1, 0x9f, 0xab, 0xa6, 0xe1, 0xf8, 0x8b, 0xdb,
	0x89, 0x0c, 0x96, 0x5f, 0x0f, 0x42, 0xee, 0x18, 0xed, 0xd9, 0x33, 0xd2, 0xd3, 0x6f, 0xd0, 0x32,
	0x40, 0x73, 0x9f, 0x4b, 0x29, 0x92, 0x7a, 0x6c, 0x67, 0x31, 0x5f, 0x9b, 0x27, 0x4b, 0xb5, 0x85,
	0xef, 0xc1, 0x5b, 0x1d, 0x95, 0xea, 0xdc, 0x67, 0x77, 0x60, 0x2e, 0x7f, 0xad, 0xb6, 0xd0, 0x83,
	0xcb, 0x59, 0x7e, 0xc4, 0x60, 0xf4, 0xaf, 0xdf, 0xfd, 0x04, 0xca, 0xe3, 0x92, 0x52, 0xbb, 0x1e,
	0xc2, 0xb5, 0xd8, 0xf1, 0xd0, 0x68, 0x96, 0xdc, 0x8e, 0xb9, 0xd1, 0xd4, 0xa8, 0x91, 0x48, 0x7f,
	0x9f, 0xb2, 0xe5, 0x93, 0x71, 0x3c, 0x17, 0xbe, 0x04, 0x7f, 0x32, 0x58, 0x19, 0x9b, 0x8a, 0x2a,
	0xfb, 0x12, 0xae, 0xbb, 0xfc, 0xfa, 0xcb, 0x70, 0x96, 0xd2, 0x46, 0x43, 0x2f, 0x6c, 0x0f, 0x36,
	0x7f, 0xba, 0x0c, 0xb3, 0x86, 0x3a, 0x3e, 0x81, 0x39, 0xab, 0xfd, 0xb8, 0xea, 0x32, 0x3a, 0x79,
	0xb5, 0x78, 0x6b, 0x13, 0x10, 0x36, 0x89, 0xbf, 0xf4, 0xfc, 0xaf, 0xff, 0x7e, 0x9e, 0x7e, 0x17,
	0x4b, 0xa1, 0x81, 0x86, 0xce, 0xbd, 0x85, 0xbf, 0x32, 0x98, 0xc9, 0x15, 0x0f, 0x8b, 0x4e, 0x72,
	0x2f, 0x19, 0xcf, 0x9f, 0x04, 0xa1, 0x6c, 0x55, 0x93, 0xed, 0x1e, 0x6e, 0xb9, 0xd9, 0x72, 0x21,
	0x0d, 0x0f, 0x1d, 0xe5, 0xea, 0x8d, 0xbc, 0x93, 0x92, 0xf5, 0xc2, 0x43, 0xa3, 0x50, 0x3d, 0x4c,
	0x60, 0xd6, 0xe8, 0x36, 0x16, 0xe5, 0x1d, 0xb9, 0x35, 0xbc, 0xdb, 0x13, 0x31, 0x44, 0xce, 0x33,
	0xe4, 0x4a, 0x88, 0x27, 0xc9, 0xe1, 0x6f, 0x0c, 0x60, 0xf0, 0xe9, 0xe3, 0x7a, 0x71, 0xad, 0x27,
	0x54, 0xdb, 0xab, 0x9c, 0x0e, 0xa4, 0xec, 0x7b, 0x26, 0xfb, 0x43, 0xfc, 0xdc, 0xcd, 0x3e, 0xf4,
	0x57, 0x72, 0xde, 0x0e, 0xfd, 0xc0, 0x60, 0x61, 0x48, 0xeb, 0xb0, 0x52, 0xdc, 0x84, 0x93, 0xaa,
	0xeb, 0x7d, 0x78, 0x06, 0x24, 0xd1, 0x5e, 0x33, 0xb4, 0x6f, 0xe1, 0xcd, 0xb1, 0xb4, 0xf1, 0x0f,
	0x06, 0xd7, 0xdc, 0xcf, 0x05, 0x3f, 0x1e, 0xd3, 0x96, 0x22, 0x89, 0xf3, 0x36, 0xce, 0x06, 0x9e,
	0xbc, 0x62, 0xa3, 0xbf, 0x6e, 0x59, 0x78, 0x38, 0xd0, 0xcd, 0x5e, 0x78, 0x48, 0x2a, 0x99, 0x37,
	0x95, 0x64, 0xb0, 0x87, 0xbf, 0x30, 0xb8, 0x3e, 0xa2, 0x13, 0xb8, 0x31, 0xa6, 0x35, 0x85, 0xca,
	0xe5, 0xdd, 0x39, 0x23, 0x9a, 0xb8, 0xaf, 0x1b, 0xee, 0x6b, 0xb8, 0x72, 0x0a, 0xf7, 0xed, 0xaf,
	0x5e, 0x1e, 0x95, 0xd9, 0xab, 0xa3, 0x32, 0xfb, 0xf7, 0xa8, 0xcc, 0x5e, 0x1c, 0x97, 0xa7, 0x5e,
	0x1d, 0x97, 0xa7, 0xfe, 0x3e, 0x2e, 0x4f, 0x7d, 0xf3, 0x59, 0x14, 0xeb, 0xfd, 0x6e, 0x23, 0x68,
	0xaa, 0x76, 0x98, 0xe9, 0x94, 0xcb, 0x48, 0x24, 0xea, 0x40, 0xdc, 0x39, 0x10, 0x52, 0x77, 0x53,
	0x91, 0xd1, 0xc9, 0xdf, 0xf7, 0xcf, 0xd6, 0xcf, 0x3a, 0x22, 0x6b, 0xcc, 0x99, 0x1f, 0xd4, 0x4f,
	0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x89, 0x76, 0x1a, 0xd4, 0x8e, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Mint by source_contract_address and nonce
	Mint(ctx context.Context, in *QueryGetMintRequest, opts ...grpc.CallOption) (*QueryGetMintResponse, error)
	// Queries a list of Mints
	Mints(ctx context.Context, in *QueryAllMintsRequest, opts ...grpc.CallOption) (*QueryAllMintsResponse, error)
	// Queries an IBCForward by source_contract_address and nonce
	IBCForward(ctx context.Context, in *QueryGetIBCForwardRequest, opts ...grpc.CallOption) (*QueryGetIBCForwardResponse, error)
	// Queries a list of IBCForwards
	IBCForwards(ctx context.Context, in *QueryAllIBCForwardsRequest, opts ...grpc.CallOption) (*QueryAllIBCForwardsResponse, error)
	// Queries an InFlightPacket by source_contract_address and nonce
	InFlightPacket(ctx context.Context, in *QueryGetInFlightPacketRequest, opts ...grpc.CallOption) (*QueryGetInFlightPacketResponse, error)
	// Queries a list of InFlightPackets
	InFlightPackets(ctx context.Context, in *QueryAllInFlightPacketsRequest, opts ...grpc.CallOption) (*QueryAllInFlightPacketsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/noble.router.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mint(ctx context.Context, in *QueryGetMintRequest, opts ...grpc.CallOption) (*QueryGetMintResponse, error) {
	out := new(QueryGetMintResponse)
	err := c.cc.Invoke(ctx, "/noble.router.Query/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mints(ctx context.Context, in *QueryAllMintsRequest, opts ...grpc.CallOption) (*QueryAllMintsResponse, error) {
	out := new(QueryAllMintsResponse)
	err := c.cc.Invoke(ctx, "/noble.router.Query/Mints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCForward(ctx context.Context, in *QueryGetIBCForwardRequest, opts ...grpc.CallOption) (*QueryGetIBCForwardResponse, error) {
	out := new(QueryGetIBCForwardResponse)
	err := c.cc.Invoke(ctx, "/noble.router.Query/IBCForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCForwards(ctx context.Context, in *QueryAllIBCForwardsRequest, opts ...grpc.CallOption) (*QueryAllIBCForwardsResponse, error) {
	out := new(QueryAllIBCForwardsResponse)
	err := c.cc.Invoke(ctx, "/noble.router.Query/IBCForwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InFlightPacket(ctx context.Context, in *QueryGetInFlightPacketRequest, opts ...grpc.CallOption) (*QueryGetInFlightPacketResponse, error) {
	out := new(QueryGetInFlightPacketResponse)
	err := c.cc.Invoke(ctx, "/noble.router.Query/InFlightPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InFlightPackets(ctx context.Context, in *QueryAllInFlightPacketsRequest, opts ...grpc.CallOption) (*QueryAllInFlightPacketsResponse, error) {
	out := new(QueryAllInFlightPacketsResponse)
	err := c.cc.Invoke(ctx, "/noble.router.Query/InFlightPackets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Mint by source_contract_address and nonce
	Mint(context.Context, *QueryGetMintRequest) (*QueryGetMintResponse, error)
	// Queries a list of Mints
	Mints(context.Context, *QueryAllMintsRequest) (*QueryAllMintsResponse, error)
	// Queries an IBCForward by source_contract_address and nonce
	IBCForward(context.Context, *QueryGetIBCForwardRequest) (*QueryGetIBCForwardResponse, error)
	// Queries a list of IBCForwards
	IBCForwards(context.Context, *QueryAllIBCForwardsRequest) (*QueryAllIBCForwardsResponse, error)
	// Queries an InFlightPacket by source_contract_address and nonce
	InFlightPacket(context.Context, *QueryGetInFlightPacketRequest) (*QueryGetInFlightPacketResponse, error)
	// Queries a list of InFlightPackets
	InFlightPackets(context.Context, *QueryAllInFlightPacketsRequest) (*QueryAllInFlightPacketsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Mint(ctx context.Context, req *QueryGetMintRequest) (*QueryGetMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (*UnimplementedQueryServer) Mints(ctx context.Context, req *QueryAllMintsRequest) (*QueryAllMintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mints not implemented")
}
func (*UnimplementedQueryServer) IBCForward(ctx context.Context, req *QueryGetIBCForwardRequest) (*QueryGetIBCForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCForward not implemented")
}
func (*UnimplementedQueryServer) IBCForwards(ctx context.Context, req *QueryAllIBCForwardsRequest) (*QueryAllIBCForwardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCForwards not implemented")
}
func (*UnimplementedQueryServer) InFlightPacket(ctx context.Context, req *QueryGetInFlightPacketRequest) (*QueryGetInFlightPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InFlightPacket not implemented")
}
func (*UnimplementedQueryServer) InFlightPackets(ctx context.Context, req *QueryAllInFlightPacketsRequest) (*QueryAllInFlightPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InFlightPackets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.router.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.router.Query/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mint(ctx, req.(*QueryGetMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.router.Query/Mints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mints(ctx, req.(*QueryAllMintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIBCForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.router.Query/IBCForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCForward(ctx, req.(*QueryGetIBCForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIBCForwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.router.Query/IBCForwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCForwards(ctx, req.(*QueryAllIBCForwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InFlightPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInFlightPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InFlightPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.router.Query/InFlightPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InFlightPacket(ctx, req.(*QueryGetInFlightPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InFlightPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInFlightPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InFlightPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.router.Query/InFlightPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InFlightPackets(ctx, req.(*QueryAllInFlightPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.router.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _Query_Mint_Handler,
		},
		{
			MethodName: "Mints",
			Handler:    _Query_Mints_Handler,
		},
		{
			MethodName: "IBCForward",
			Handler:    _Query_IBCForward_Handler,
		},
		{
			MethodName: "IBCForwards",
			Handler:    _Query_IBCForwards_Handler,
		},
		{
			MethodName: "InFlightPacket",
			Handler:    _Query_InFlightPacket_Handler,
		},
		{
			MethodName: "InFlightPackets",
			Handler:    _Query_InFlightPackets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "router/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceDomainSender) > 0 {
		i -= len(m.SourceDomainSender)
		copy(dAtA[i:], m.SourceDomainSender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceDomainSender)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SourceDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Mint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMintsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMintsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMintsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMintsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMintsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMintsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mints) > 0 {
		for iNdEx := len(m.Mints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIBCForwardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIBCForwardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIBCForwardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceDomainSender) > 0 {
		i -= len(m.SourceDomainSender)
		copy(dAtA[i:], m.SourceDomainSender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceDomainSender)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SourceDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIBCForwardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIBCForwardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIBCForwardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IbcForward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIBCForwardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIBCForwardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIBCForwardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIBCForwardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIBCForwardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIBCForwardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IbcForwards) > 0 {
		for iNdEx := len(m.IbcForwards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IbcForwards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInFlightPacketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInFlightPacketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInFlightPacketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInFlightPacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInFlightPacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInFlightPacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InFlightPacket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInFlightPacketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInFlightPacketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInFlightPacketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInFlightPacketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInFlightPacketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInFlightPacketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InFlightPackets) > 0 {
		for iNdEx := len(m.InFlightPackets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InFlightPackets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceDomain != 0 {
		n += 1 + sovQuery(uint64(m.SourceDomain))
	}
	l = len(m.SourceDomainSender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Mint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMintsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMintsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mints) > 0 {
		for _, e := range m.Mints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIBCForwardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceDomain != 0 {
		n += 1 + sovQuery(uint64(m.SourceDomain))
	}
	l = len(m.SourceDomainSender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetIBCForwardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IbcForward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIBCForwardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIBCForwardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IbcForwards) > 0 {
		for _, e := range m.IbcForwards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInFlightPacketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovQuery(uint64(m.Sequence))
	}
	return n
}

func (m *QueryGetInFlightPacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InFlightPacket.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInFlightPacketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInFlightPacketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InFlightPackets) > 0 {
		for _, e := range m.InFlightPackets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomain", wireType)
			}
			m.SourceDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomainSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceDomainSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Mint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMintsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMintsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMintsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMintsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMintsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMintsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mints = append(m.Mints, Mint{})
			if err := m.Mints[len(m.Mints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIBCForwardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIBCForwardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIBCForwardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomain", wireType)
			}
			m.SourceDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomainSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceDomainSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIBCForwardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIBCForwardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIBCForwardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcForward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IbcForward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIBCForwardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIBCForwardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIBCForwardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIBCForwardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIBCForwardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIBCForwardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcForwards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcForwards = append(m.IbcForwards, StoreIBCForwardMetadata{})
			if err := m.IbcForwards[len(m.IbcForwards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInFlightPacketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInFlightPacketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInFlightPacketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInFlightPacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInFlightPacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInFlightPacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFlightPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InFlightPacket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInFlightPacketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInFlightPacketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInFlightPacketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInFlightPacketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInFlightPacketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInFlightPacketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFlightPackets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InFlightPackets = append(m.InFlightPackets, InFlightPacket{})
			if err := m.InFlightPackets[len(m.InFlightPackets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
