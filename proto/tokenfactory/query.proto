syntax = "proto3";
package noble.tokenfactory;

import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "tokenfactory/blacklisted.proto";
import "tokenfactory/blacklister.proto";
import "tokenfactory/master_minter.proto";
import "tokenfactory/minter_controller.proto";
import "tokenfactory/minters.proto";
import "tokenfactory/minting_denom.proto";
import "tokenfactory/owner.proto";
import "tokenfactory/params.proto";
import "tokenfactory/paused.proto";
import "tokenfactory/pauser.proto";

option go_package = "github.com/noble-assets/noble/v4/x/tokenfactory/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/noble/tokenfactory/params";
  }
  // Queries a Blacklisted by index.
  rpc Blacklisted(QueryGetBlacklistedRequest) returns (QueryGetBlacklistedResponse) {
    option (google.api.http).get = "/noble/tokenfactory/blacklisted/{address}";
  }

  // Queries a list of Blacklisted items.
  rpc BlacklistedAll(QueryAllBlacklistedRequest) returns (QueryAllBlacklistedResponse) {
    option (google.api.http).get = "/noble/tokenfactory/blacklisted";
  }

  // Queries a Paused by index.
  rpc Paused(QueryGetPausedRequest) returns (QueryGetPausedResponse) {
    option (google.api.http).get = "/noble/tokenfactory/paused";
  }
  // Queries a MasterMinter by index.
  rpc MasterMinter(QueryGetMasterMinterRequest) returns (QueryGetMasterMinterResponse) {
    option (google.api.http).get = "/noble/tokenfactory/master_minter";
  }
  // Queries a Minters by index.
  rpc Minters(QueryGetMintersRequest) returns (QueryGetMintersResponse) {
    option (google.api.http).get = "/noble/tokenfactory/minters/{address}";
  }

  // Queries a list of Minters items.
  rpc MintersAll(QueryAllMintersRequest) returns (QueryAllMintersResponse) {
    option (google.api.http).get = "/noble/tokenfactory/minters";
  }

  // Queries a Pauser by index.
  rpc Pauser(QueryGetPauserRequest) returns (QueryGetPauserResponse) {
    option (google.api.http).get = "/noble/tokenfactory/pauser";
  }
  // Queries a Blacklister by index.
  rpc Blacklister(QueryGetBlacklisterRequest) returns (QueryGetBlacklisterResponse) {
    option (google.api.http).get = "/noble/tokenfactory/blacklister";
  }
  // Queries a Owner by index.
  rpc Owner(QueryGetOwnerRequest) returns (QueryGetOwnerResponse) {
    option (google.api.http).get = "/noble/tokenfactory/owner";
  }
  // Queries a MinterController by index.
  rpc MinterController(QueryGetMinterControllerRequest) returns (QueryGetMinterControllerResponse) {
    option (google.api.http).get = "/noble/tokenfactory/minter_controller/{controllerAddress}";
  }

  // Queries a list of MinterController items.
  rpc MinterControllerAll(QueryAllMinterControllerRequest) returns (QueryAllMinterControllerResponse) {
    option (google.api.http).get = "/noble/tokenfactory/minter_controller";
  }

  // Queries a MintingDenom by index.
  rpc MintingDenom(QueryGetMintingDenomRequest) returns (QueryGetMintingDenomResponse) {
    option (google.api.http).get = "/noble/tokenfactory/minting_denom";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetBlacklistedRequest {
  string address = 1;
}

message QueryGetBlacklistedResponse {
  Blacklisted blacklisted = 1 [(gogoproto.nullable) = false];
}

message QueryAllBlacklistedRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlacklistedResponse {
  repeated Blacklisted blacklisted = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPausedRequest {}

message QueryGetPausedResponse {
  Paused paused = 1 [(gogoproto.nullable) = false];
}
message QueryGetMasterMinterRequest {}

message QueryGetMasterMinterResponse {
  MasterMinter masterMinter = 1 [(gogoproto.nullable) = false];
}
message QueryGetMintersRequest {
  string address = 1;
}

message QueryGetMintersResponse {
  Minters minters = 1 [(gogoproto.nullable) = false];
}

message QueryAllMintersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMintersResponse {
  repeated Minters minters = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPauserRequest {}

message QueryGetPauserResponse {
  Pauser pauser = 1 [(gogoproto.nullable) = false];
}
message QueryGetBlacklisterRequest {}

message QueryGetBlacklisterResponse {
  Blacklister blacklister = 1 [(gogoproto.nullable) = false];
}
message QueryGetOwnerRequest {}

message QueryGetOwnerResponse {
  Owner owner = 1 [(gogoproto.nullable) = false];
}

message QueryGetMinterControllerRequest {
  string controllerAddress = 1;
}

message QueryGetMinterControllerResponse {
  MinterController minterController = 1 [(gogoproto.nullable) = false];
}

message QueryAllMinterControllerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMinterControllerResponse {
  repeated MinterController minterController = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetMintingDenomRequest {}

message QueryGetMintingDenomResponse {
  MintingDenom mintingDenom = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
