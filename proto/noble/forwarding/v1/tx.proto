syntax = "proto3";

package noble.forwarding.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "github.com/noble-assets/noble/v5/x/forwarding/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc RegisterAccount(noble.forwarding.v1.MsgRegisterAccount)
      returns (noble.forwarding.v1.MsgRegisterAccountResponse);
  rpc ClearAccount(noble.forwarding.v1.MsgClearAccount)
      returns (noble.forwarding.v1.MsgClearAccountResponse);
}

message MsgRegisterAccount {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name)           = "noble/MsgRegisterAccount";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string signer    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string recipient = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string channel   = 3;
}

message MsgRegisterAccountResponse {
  string address = 1;
}

message MsgClearAccount {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name)           = "noble/MsgClearAccount";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string signer  = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgClearAccountResponse {}
